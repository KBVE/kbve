name: CI - Atomic Branches

on:
    push:
        branches:
            - 'atom-*'

jobs:
    validate_and_merge:
        name: 'Validate & Auto-merge Atom Branch'
        runs-on: ubuntu-latest
        permissions:
            contents: write
            pull-requests: write
            issues: write
        
        steps:
            - name: Validate branch name
              id: validate
              run: |
                  BRANCH_NAME="${{ github.ref_name }}"
                  
                  echo "üîç Validating branch: $BRANCH_NAME"
                  
                  # Strict validation: atom- prefix + alphanumeric/hyphens/underscores only
                  if [[ ! "$BRANCH_NAME" =~ ^atom-[a-zA-Z0-9_-]+$ ]]; then
                      echo "‚ùå Invalid branch name: $BRANCH_NAME"
                      echo "‚úÖ Valid format: atom-[a-zA-Z0-9_-]+"
                      echo "Examples: atom-fix-login, atom-add-feature, atom-update-docs"
                      exit 1
                  fi
                  
                  # Length check (reasonable limit)
                  if [[ ${#BRANCH_NAME} -gt 50 ]]; then
                      echo "‚ùå Branch name too long: ${#BRANCH_NAME} characters (max 50)"
                      exit 1
                  fi
                  
                  # Reserved name check
                  if [[ "$BRANCH_NAME" =~ (atom-main|atom-dev|atom-master) ]]; then
                      echo "‚ùå Reserved branch name: $BRANCH_NAME"
                      exit 1
                  fi
                  
                  echo "‚úÖ Valid branch name: $BRANCH_NAME"
                  echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

            - name: Check if dev branch exists
              id: check_dev
              uses: actions/github-script@v7
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                  try {
                    await github.rest.repos.getBranch({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      branch: 'dev'
                    });
                    console.log('‚úÖ Dev branch exists');
                    return true;
                  } catch (error) {
                    if (error.status === 404) {
                      console.log('‚ùå Dev branch does not exist');
                      return false;
                    }
                    throw error;
                  }

            - name: Create dev branch if missing
              if: steps.check_dev.outputs.result == 'false'
              uses: actions/github-script@v7
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                  // Get main branch SHA
                  const mainBranch = await github.rest.repos.getBranch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    branch: 'main'
                  });
                  
                  // Create dev branch from main
                  await github.rest.git.createRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: 'refs/heads/dev',
                    sha: mainBranch.data.commit.sha
                  });
                  
                  console.log('‚úÖ Created dev branch from main');

            - name: Auto-merge atom into dev
              id: merge
              uses: actions/github-script@v7
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                  const branchName = '${{ steps.validate.outputs.branch_name }}';
                  const owner = context.repo.owner;
                  const repo = context.repo.repo;
                  
                  console.log(`üîÑ Attempting to merge ${branchName} into dev...`);
                  
                  try {
                    // Attempt merge using GitHub API (safe from injection)
                    const mergeResult = await github.rest.repos.merge({
                      owner: owner,
                      repo: repo,
                      base: 'dev',
                      head: branchName,
                      commit_message: `Auto-merge ${branchName} into dev\n\nMerged via automated workflow`
                    });
                    
                    console.log(`‚úÖ Successfully merged into dev`);
                    console.log(`üìç Merge commit SHA: ${mergeResult.data.sha}`);
                    
                    return {
                      success: true,
                      sha: mergeResult.data.sha,
                      message: 'Merge successful'
                    };
                    
                  } catch (error) {
                    console.log(`‚ùå Merge failed: ${error.message}`);
                    
                    // Common merge conflict scenario
                    if (error.status === 409) {
                      return {
                        success: false,
                        error: 'merge_conflict',
                        message: 'Merge conflicts detected - manual resolution required'
                      };
                    }
                    
                    // Other errors (network, permissions, etc.)
                    return {
                      success: false,
                      error: 'merge_failed',
                      message: error.message
                    };
                  }

            - name: Delete atom branch on successful merge
              if: fromJson(steps.merge.outputs.result).success == true
              uses: actions/github-script@v7
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                  const branchName = '${{ steps.validate.outputs.branch_name }}';
                  
                  try {
                    await github.rest.git.deleteRef({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      ref: `heads/${branchName}`
                    });
                    
                    console.log(`‚úÖ Successfully deleted branch: ${branchName}`);
                  } catch (error) {
                    console.log(`‚ö†Ô∏è Could not delete branch ${branchName}: ${error.message}`);
                    // Don't fail the workflow if branch deletion fails
                  }

            - name: Create issue for merge conflicts
              if: fromJson(steps.merge.outputs.result).success == false && fromJson(steps.merge.outputs.result).error == 'merge_conflict'
              uses: actions/github-script@v7
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                  const branchName = '${{ steps.validate.outputs.branch_name }}';
                  const issueBody = `
                  ## üîÄ Merge Conflict: \`${branchName}\`
                  
                  The atomic branch \`${branchName}\` could not be automatically merged into \`dev\` due to conflicts.
                  
                  ### Manual Resolution Required:
                  
                  \`\`\`bash
                  # 1. Checkout and update dev
                  git checkout dev
                  git pull origin dev
                  
                  # 2. Checkout your atom branch
                  git checkout ${branchName}
                  
                  # 3. Rebase onto latest dev
                  git rebase dev
                  
                  # 4. Resolve conflicts, then:
                  git add .
                  git rebase --continue
                  
                  # 5. Force push (creates new commits, triggers re-merge)
                  git push --force-with-lease origin ${branchName}
                  \`\`\`
                  
                  ### Or use GitHub UI:
                  1. Create a PR from \`${branchName}\` to \`dev\`
                  2. Resolve conflicts in the web editor
                  3. Merge manually
                  
                  **This issue will auto-close when the branch is successfully merged or deleted.**
                  `;
                  
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: `Merge conflict: ${branchName} ‚Üí dev`,
                    body: issueBody,
                    labels: ['merge-conflict', 'atom-branch', 'needs-resolution']
                  });
                  
                  console.log(`üìù Created issue for merge conflict resolution`);

            - name: Fail workflow on merge error
              if: fromJson(steps.merge.outputs.result).success == false
              run: |
                echo "‚ùå Atomic merge failed"
                echo "Branch: ${{ steps.validate.outputs.branch_name }}"
                echo "Error: ${{ fromJson(steps.merge.outputs.result).message }}"
                exit 1

            - name: Success summary
              if: fromJson(steps.merge.outputs.result).success == true
              run: |
                echo "üéâ Atomic branch workflow completed successfully!"
                echo "‚úÖ Branch: ${{ steps.validate.outputs.branch_name }}"
                echo "‚úÖ Merged into: dev"
                echo "‚úÖ Branch deleted: ${{ steps.validate.outputs.branch_name }}"
                echo "üìç Merge SHA: ${{ fromJson(steps.merge.outputs.result).sha }}"