name: CI - Atomic Branches

on:
    push:
        branches:
            - 'atom-*'

jobs:
    create_pull_request:
        name: 'Create PR for Atom Branch'
        runs-on: ubuntu-latest
        permissions:
            contents: read
            pull-requests: write
            issues: write
        
        steps:
            - name: Validate branch name
              id: validate
              run: |
                  BRANCH_NAME="${{ github.ref_name }}"
                  
                  echo "Validating branch: $BRANCH_NAME"
                  
                  # Strict validation: atom- prefix + alphanumeric/hyphens only
                  if [[ ! "$BRANCH_NAME" =~ ^atom-[a-zA-Z0-9-]+$ ]]; then
                      echo "Invalid branch name: $BRANCH_NAME"
                      echo "Valid format: atom-[a-zA-Z0-9-]+"
                      echo "Examples: atom-12151430-fix-login, atom-12151430-update-docs"
                      exit 1
                  fi
                  
                  # Length check
                  if [[ ${#BRANCH_NAME} -gt 50 ]]; then
                      echo "Branch name too long: ${#BRANCH_NAME} characters (max 50)"
                      exit 1
                  fi
                  
                  # Reserved name check
                  if [[ "$BRANCH_NAME" =~ (atom-main|atom-dev|atom-master) ]]; then
                      echo "Reserved branch name: $BRANCH_NAME"
                      exit 1
                  fi
                  
                  echo "Valid branch name: $BRANCH_NAME"
                  echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

            - name: Check if dev branch exists
              id: check_dev
              uses: actions/github-script@v7
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                  try {
                    await github.rest.repos.getBranch({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      branch: 'dev'
                    });
                    console.log('Dev branch exists');
                    return true;
                  } catch (error) {
                    if (error.status === 404) {
                      console.log('Dev branch does not exist');
                      return false;
                    }
                    throw error;
                  }

            - name: Create dev branch if missing
              if: steps.check_dev.outputs.result == 'false'
              uses: actions/github-script@v7
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                  // Get main branch SHA
                  const mainBranch = await github.rest.repos.getBranch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    branch: 'main'
                  });
                  
                  // Create dev branch from main
                  await github.rest.git.createRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: 'refs/heads/dev',
                    sha: mainBranch.data.commit.sha
                  });
                  
                  console.log('Created dev branch from main');

            - name: Check if PR already exists
              id: check_pr
              uses: actions/github-script@v7
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                  const branchName = '${{ steps.validate.outputs.branch_name }}';
                  
                  const existingPRs = await github.rest.pulls.list({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    head: `${context.repo.owner}:${branchName}`,
                    base: 'dev',
                    state: 'open'
                  });
                  
                  if (existingPRs.data.length > 0) {
                    console.log(`PR already exists: #${existingPRs.data[0].number}`);
                    return {
                      exists: true,
                      number: existingPRs.data[0].number,
                      url: existingPRs.data[0].html_url
                    };
                  } else {
                    console.log('No existing PR found');
                    return { exists: false };
                  }

            - name: Create pull request
              if: fromJson(steps.check_pr.outputs.result).exists == false
              id: create_pr
              uses: actions/github-script@v7
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                  const branchName = '${{ steps.validate.outputs.branch_name }}';
                  
                  // Extract description from branch name for title
                  const parts = branchName.split('-');
                  const description = parts.length > 2 ? parts.slice(2).join(' ') : 'atomic changes';
                  const title = `Atomic: ${description}`;
                  
                  const prBody = `## Atomic Branch: \`${branchName}\`
                  
                  This is an automated pull request for atomic changes.
                  
                  ### Changes
                  - [ ] Review changes
                  - [ ] Verify tests pass
                  - [ ] Ready to merge
                  
                  ### Branch Info
                  - **Source:** \`${branchName}\`
                  - **Target:** \`dev\`
                  - **Type:** Atomic workflow
                  
                  ---
                  *This PR was automatically created by the atomic branch workflow.*`;
                  
                  const pr = await github.rest.pulls.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: title,
                    head: branchName,
                    base: 'dev',
                    body: prBody,
                    draft: false
                  });
                  
                  // Add labels
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.data.number,
                    labels: ['atomic-branch', 'auto-pr']
                  });
                  
                  console.log(`Created PR #${pr.data.number}: ${pr.data.html_url}`);
                  
                  return {
                    number: pr.data.number,
                    url: pr.data.html_url
                  };

            - name: Success summary
              run: |
                echo "Atomic branch workflow completed!"
                echo "Branch: ${{ steps.validate.outputs.branch_name }}"
                
                if [[ "${{ fromJson(steps.check_pr.outputs.result).exists }}" == "true" ]]; then
                  echo "Existing PR: ${{ fromJson(steps.check_pr.outputs.result).url }}"
                else
                  echo "New PR created: ${{ fromJson(steps.create_pr.outputs.result).url }}"
                fi
                
                echo ""
                echo "Next steps:"
                echo "1. Review the PR"
                echo "2. Approve and merge when ready"
                echo "3. Branch will be auto-deleted after merge"