name: CI - Main

on:
    workflow_dispatch:
    push:
        branches:
            - main

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

jobs:
    globals:
      runs-on: ubuntu-latest
      name: Global Variables
      outputs:
          sha256head: ${{ steps.hash.outputs.sha256head }}

      steps:
          - name: Checkout Code
            uses: actions/checkout@v4
            with:
                fetch-depth: 0
                token: ${{ secrets.GITHUB_TOKEN }}

          - name: Configure Git
            run: |
                git config user.name "github-actions[bot]"
                git config user.email "github-actions[bot]@users.noreply.github.com"

          - name: Calculate SHA-256 Hash
            id: hash
            run: |
                echo "sha256head=$(echo -n ${{ github.sha }} | sha256sum | awk '{print $1}')" >> $GITHUB_OUTPUT

    call_sync:
        needs: ['globals']
        name: 'Call Sync Workflow'
        uses: ./.github/workflows/ci-sync.yml
        secrets:
          UNITY_PAT: ${{ secrets.UNITY_PAT }}
        
    alter:
        needs: ['globals']
        name: 'Alpha Alters'
        if: github.repository == 'kbve/kbve'
        uses: KBVE/kbve/.github/workflows/utils-file-alterations.yml@main
        with:
            branch: 'main'

    deploy:
        needs: ['alter', 'globals']
        name: Deployment
        runs-on: ubuntu-latest
        steps:
            - name: Checkout the repository using git
              uses: actions/checkout@v4

            - name: Setup Node v22
              uses: actions/setup-node@v4
              with:
                  node-version: 22

            - name: Setup pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: 10
                  run_install: false
            #   @[CACHE]->[START]
            - name: Get pnpm Store
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm Cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

    ## Godot
    generate_godot_matrix:
        needs: ['deploy', 'alter', 'globals']
        uses: KBVE/kbve/.github/workflows/utils-generate-matrix.yml@main
        with:
            items: |
                [
                    {
                        "name": "pirate17",
                        "condition": "${{ needs.alter.outputs.pirate17 == 'true' }}",
                        "project": "pirate17",
                        "branch": "main",
                        "deploy_to_itch": true,
                        "export_name": "pirate17",
                        "project_path": "./apps/gamejam/pirate/pirate17",
                        "build_artifact_name": "pirate17",
                        "itch_username": "kbve",
                        "itch_gameid": "airship",
                        "godot_version": "4.4.1"
                    }
                ]

    publish_godot:
        name: Publish Godot Game on Itch
        needs: ['generate_godot_matrix']
        if: ${{ needs.generate_godot_matrix.outputs.matrix != 'null' }}
        strategy:
            matrix: ${{ fromJson(needs.generate_godot_matrix.outputs.matrix) }}
        uses: KBVE/kbve/.github/workflows/utils-godot-itch-build-pipeline.yml@main
        with:
            branch: ${{ matrix.branch }}
            deploy_to_itch: ${{ matrix.deploy_to_itch }}
            godot_version: ${{ matrix.godot_version }}
            export_name: ${{ matrix.export_name }}
            project_path: ${{ matrix.project_path }}
            build_artifact_name: ${{ matrix.build_artifact_name }}
            itch_username: ${{ matrix.itch_username }}
            itch_gameid: ${{ matrix.itch_gameid }}
        secrets:
            butler_api: ${{ secrets.ITCH_API }}

    ## NPM
    generate_npm_matrix:
        needs: ['deploy', 'alter', 'globals']
        uses: KBVE/kbve/.github/workflows/utils-generate-matrix.yml@main
        with:
            items: |
                [
                    {
                      "name": "droid",
                      "condition": "${{ needs.alter.outputs.droid == 'true' }}",
                      "project": "droid"
                    }
                ]

    publish_npm:
        name: Publish NPM
        needs: ['generate_npm_matrix']
        if: ${{ needs.generate_npm_matrix.outputs.matrix != 'null' }}
        strategy:
            matrix: ${{ fromJson(needs.generate_npm_matrix.outputs.matrix) }}
        uses: KBVE/kbve/.github/workflows/utils-npm-publish.yml@main
        with:
            project: ${{ matrix.project }}
        secrets:
            NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    ## Astro
    generate_astro_matrix:
        needs: ['deploy', 'alter', 'globals']
        uses: KBVE/kbve/.github/workflows/utils-generate-matrix.yml@main
        with:
            items: |
                [
                    {
                      "name": "astro_memes",
                      "condition": "${{ needs.alter.outputs.astro_memes == 'true' }}",
                      "node_version": "22",
                      "pnpm_version": "10",
                      "build_command": "astro-memes:build",
                      "source_path": "dist/apps/astro-memes/",
                      "destination_repo": "KBVE/meme.sh",
                      "destination_folder": "/docs",
                      "destination_branch": "main"
                    }
                ]

    build_astro:
        name: Build Astro Projects
        needs: ['generate_astro_matrix']
        if: ${{ needs.generate_astro_matrix.outputs.matrix != 'null' }}
        strategy:
            matrix: ${{ fromJson(needs.generate_astro_matrix.outputs.matrix) }}
        uses: KBVE/kbve/.github/workflows/utils-astro-deployment.yml@main
        with:
            node_version: ${{ matrix.node_version }}
            pnpm_version: ${{ matrix.pnpm_version }}
            build_command: ${{ matrix.build_command }}
            source_path: ${{ matrix.source_path }}
            destination_repo: ${{ matrix.destination_repo }}
            destination_folder: ${{ matrix.destination_folder }}
            destination_branch: ${{ matrix.destination_branch }}

        secrets:
            GITHUB_PAT: ${{ secrets.UNITY_PAT }}

    #  "target_platforms": "[\"StandaloneWindows64\", \"WebGL\"]",
    generate_unity_matrix:
        needs: ['deploy', 'alter', 'globals']
        uses: KBVE/kbve/.github/workflows/utils-generate-matrix.yml@main
        with:
            items: |
                [
                  {
                    "name": "rareicon",
                    "condition": "${{ needs.alter.outputs.rareicon_unity == 'true' }}",
                    "project_path": "azure-rareicon",
                    "azure_repo_url": "dev.azure.com/kbve/rareicon/_git/rareicon",
                    "unity_version": "6000.0.25f1",
                    "target_platforms": "[\"StandaloneWindows64\", \"WebGL\"]",
                    "deploy_to_itch": true,
                    "itch_username": "kbve",
                    "itch_gameid": "rareicon",
                    "gh_pages_repo": "KBVE/unity.rareicon.com",
                    "gh_pages_domain": "unity.rareicon.com"
                  }
                ]

    build_unity:
        name: Build Unity Projects
        needs: ['generate_unity_matrix']
        if: ${{ needs.generate_unity_matrix.outputs.matrix != 'null' }}
        strategy:
            matrix: ${{ fromJson(needs.generate_unity_matrix.outputs.matrix) }}
        uses: KBVE/kbve/.github/workflows/utils-unity-azure-deployment.yml@main
        with:
            unity_version: ${{ matrix.unity_version }}
            project_path: ${{ matrix.project_path }}
            azure_repo_url: ${{ matrix.azure_repo_url }}
            target_platforms: ${{ matrix.target_platforms }}
            deploy_to_itch: ${{ matrix.deploy_to_itch }}
            itch_username: ${{ matrix.itch_username }}
            itch_gameid: ${{ matrix.itch_gameid }}
            gh_pages_repo: ${{ matrix.gh_pages_repo }}
            gh_pages_domain: ${{ matrix.gh_pages_domain }}
        secrets:
            unity_license: ${{ secrets.UNITY_LICENSE }}
            unity_email: ${{ secrets.UNITY_EMAIL }}
            unity_password: ${{ secrets.UNITY_PASSWORD }}
            azure_pat: ${{ secrets.AZURE_NOV2025_TOKEN_SECRET  }}
            butler_api: ${{ secrets.ITCH_API }}
            gh_pages_pat: ${{ secrets.UNITY_PAT }}

    generate_crates_matrix:
        needs: ['deploy', 'alter', 'globals']
        uses: KBVE/kbve/.github/workflows/utils-generate-matrix.yml@main
        with:
            items: |
                [
                  { "name": "q", "condition": "${{ needs.alter.outputs.q_crate }}" },
                  { "name": "jedi", "condition": "${{ needs.alter.outputs.jedi_crate }}" },
                  { "name": "soul", "condition": "${{ needs.alter.outputs.soul_crate }}" },
                  { "name": "kbve", "condition": "${{ needs.alter.outputs.kbve_crate }}" },
                  { "name": "erust", "condition": "${{ needs.alter.outputs.erust_crate }}" },
                  { "name": "holy", "condition": "${{ needs.alter.outputs.holy_crate }}" }
                ]

    publish_crates:
        needs: ['generate_crates_matrix']
        name: Publish Rust Crates
        if: ${{ needs.generate_crates_matrix.outputs.matrix != 'null' }}
        strategy:
            matrix: ${{ fromJson(needs.generate_crates_matrix.outputs.matrix) }}
        uses: KBVE/kbve/.github/workflows/rust-publish-crate.yml@main
        with:
            package: ${{ matrix.name }}
        secrets:
            CRATES_TOKEN: ${{ secrets.CRATES_TOKEN }}

    generate_docker_matrix:
        needs: ['deploy', 'alter', 'globals']
        uses: KBVE/kbve/.github/workflows/utils-generate-matrix.yml@main
        with:
            items: |
                [
                  { "name": "kilobase", "target": "container", "condition": "${{ needs.alter.outputs.kilobase }}" },
                  { "name": "disoxide", "target": "container", "condition": "${{ needs.alter.outputs.disoxide }}" },
                  { "name": "notification-bot", "target": "container", "condition": "${{ needs.alter.outputs.notification_bot }}" },
                  { "name": "kbve-hyperlane", "target": "container", "condition": "${{ needs.alter.outputs.hyperlane }}" }


                ]

    publish_docker:
        needs: ['generate_docker_matrix']
        name: Publish Docker Images
        if: ${{ needs.generate_docker_matrix.outputs.matrix != 'null' }}
        strategy:
            matrix: ${{ fromJson(needs.generate_docker_matrix.outputs.matrix) }}
        uses: KBVE/kbve/.github/workflows/utils-publish-docker-image.yml@main
        with:
            project: ${{ matrix.name }}
            target: ${{ matrix.target }}
        secrets:
            DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
            DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
            MY_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    #   ! Everything below this line will be removed and replaced with the matrix setup.

    #   [CryptoThrone]
    cryptothrone_build_process:
        needs: ['deploy', 'alter', 'globals']
        name: CryptoThrone Build and Deployment
        if: needs.alter.outputs.cryptothrone == 'true'
        runs-on: 'ubuntu-latest'
        permissions:
            contents: read
            id-token: write
        steps:
            - name: Checkout the monorepo using git
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Node v20
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Setup pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: 9
                  run_install: false

            - name: Get pnpm Store
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm Cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install pnpm dependencies
              shell: bash
              run: |
                  pnpm install

            - name: Build CryptoThrone.com
              shell: bash
              run: |
                  pnpm nx build cryptothrone.com
            - name: CryptoThrone.com -> Deployment
              uses: dobbelina/copy_file_to_another_repo_action@main
              env:
                  API_TOKEN_GITHUB: ${{ secrets.UNITY_PAT }}
              with:
                  source_file: 'dist/apps/cryptothrone.com/'
                  destination_repo: 'KBVE/cryptothrone.com'
                  destination_folder: '/docs'
                  destination_branch: 'main'
                  destination_branch_create: 'patch-cryptothrone-deploy-${{ needs.globals.outputs.sha256head }}'
                  user_email: '5599058+h0lybyte@users.noreply.github.com'
                  user_name: 'h0lybyte'
                  commit_message: ${{ github.event.head_commit.message }}
                  rsync_option: '-avrh --delete'

    #   [Laser] -> Publish (As NPM)
    laser_npm_publish:
        needs: ['deploy', 'alter', 'globals']
        name: Laser Phaser React Library Publish
        if: needs.alter.outputs.laser == 'true'
        runs-on: 'ubuntu-latest'
        permissions:
            contents: read
            id-token: write
        steps:
            - name: Checkout the monorepo using git
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Node v20
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  registry-url: https://registry.npmjs.org/

            - name: Setup pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: 9
                  run_install: false

            #   @[CACHE]->[START]
            - name: Get pnpm Store
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm Cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

                  #   @[CACHE]->[END]

            - name: Install pnpm dependencies
              run: |
                  pnpm install

            - name: Install npm
              run: |
                  npm install --legacy-peer-deps

            - name: Print Environment Info
              shell: bash
              run: |
                  npx nx report

            - name: Build KBVE Laser NPM Package
              uses: ./.github/actions/kbve-shell
              with:
                  flag: '-nx laser:build'
                  create_pull_request: false
                  github_token: ${{ secrets.GITHUB_TOKEN }}

            - name: Publish packages
              run: npx nx release publish --projects=laser
              shell: bash
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
                  NPM_CONFIG_PROVENANCE: true

    #   [Devops] -> Publish (As NPM)
    devops_npm_publish:
        needs: ['deploy', 'alter', 'globals']
        name: Github Actions Helper Library
        if: needs.alter.outputs.devops == 'true'
        runs-on: 'ubuntu-latest'
        permissions:
            contents: read
            id-token: write
        steps:
            - name: Checkout the monorepo using git
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Node v20
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  registry-url: https://registry.npmjs.org/

            - name: Setup pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: 9
                  run_install: false

            #   @[CACHE]->[START]
            - name: Get pnpm Store
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm Cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

                  #   @[CACHE]->[END]

            - name: Install pnpm dependencies
              run: |
                  pnpm install

            - name: Install npm
              run: |
                  npm install --legacy-peer-deps

            - name: Print Environment Info
              shell: bash
              run: |
                  npx nx report

            - name: Build KBVE DevOps NPM Package
              uses: ./.github/actions/kbve-shell
              with:
                  flag: '-nx devops:build'
                  create_pull_request: false
                  github_token: ${{ secrets.GITHUB_TOKEN }}

            - name: Publish packages
              run: npx nx release publish --projects=devops
              shell: bash
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
                  NPM_CONFIG_PROVENANCE: true

    #   [KHASHVAULT] -> Publish (As NPM)
    khashvault_npm_publish:
        needs: ['deploy', 'alter', 'globals']
        name: KhashVault NPM Publish
        if: needs.alter.outputs.khashvault == 'true'
        runs-on: 'ubuntu-latest'
        permissions:
            contents: read
            id-token: write
        steps:
            - name: Checkout the monorepo using git
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Node v20
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  registry-url: https://registry.npmjs.org/

            - name: Setup pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: 9
                  run_install: false

            #   @[CACHE]->[START]
            - name: Get pnpm Store
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm Cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

                  #   @[CACHE]->[END]

            - name: Install pnpm dependencies
              run: |
                  pnpm install

            - name: Install npm
              run: |
                  npm install --legacy-peer-deps

            - name: Print Environment Info
              shell: bash
              run: |
                  npx nx report

            - name: Publish packages
              run: npx nx release publish --projects=khashvault
              shell: bash
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
                  NPM_CONFIG_PROVENANCE: true

    #   [ATLAS] -> Publish (As App)
    python_atlas_build:
        needs: ['deploy', 'alter', 'globals']
        name: Python Atlas Module Publish
        if: needs.alter.outputs.atlas == 'true'
        runs-on: 'ubuntu-latest'
        steps:
            - name: Checkout the repository using git
              uses: actions/checkout@v4

            - name: Setup Node v20
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Setup pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: 9
                  run_install: false

            #   @[CACHE]->[START]
            - name: Get pnpm Store
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm Cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            #   @[CACHE]->[END]

            - name: Install pnpm dependencies
              run: pnpm install

            - name: Python Install
              uses: actions/setup-python@v4
              with:
                  python-version: '3.x'

            - name: Poetry Install
              uses: snok/install-poetry@v1

            - name: Atlas Build
              shell: bash
              run: |
                  pnpm nx build atlas

            - name: Store the Atlas distribution packages
              uses: actions/upload-artifact@v4
              with:
                  name: atlas-python-package-distributions
                  path: apps/atlas/dist/

    #   [Fudster] -> Publish (As App)
    python_fudster_build:
        needs: ['deploy', 'alter', 'globals']
        name: Python Fudster Module Publish
        if: needs.alter.outputs.fudster == 'true'
        runs-on: 'ubuntu-latest'
        steps:
            - name: Checkout the repository using git
              uses: actions/checkout@v4

            - name: Setup Node v20
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Setup pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: 9
                  run_install: false

            #   @[CACHE]->[START]
            - name: Get pnpm Store
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm Cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            #   @[CACHE]->[END]

            - name: Install pnpm dependencies
              run: pnpm install

            - name: Python Install
              uses: actions/setup-python@v4
              with:
                  python-version: '3.x'

            - name: Poetry Install
              uses: snok/install-poetry@v1

            - name: Fudster Build
              shell: bash
              run: |
                  pnpm nx build fudster

            - name: Store the Fudster distribution packages
              uses: actions/upload-artifact@v4
              with:
                  name: fudster-python-package-distributions
                  path: apps/fudster/dist/

    # q_release:
    #     needs: ['deploy', 'alter', 'globals']
    #     name: Q Crates Publish
    #     if: needs.alter.outputs.q == 'true'
    #     uses: KBVE/kbve/.github/workflows/rust-publish-crate.yml@main
    #     with:
    #         package: q
    #     secrets:
    #         CRATES_TOKEN: ${{ secrets.CRATES_TOKEN }}

    python_atlas_publish:
        needs: ['deploy', 'alter', 'python_atlas_build']
        name: Atlas KBVE Pypi Publish
        if: needs.alter.outputs.atlas == 'true'
        runs-on: ubuntu-latest
        environment:
            name: pypi
            url: https://pypi.org/p/kbve
        permissions:
            id-token: write
        steps:
            - name: Download all the dists
              uses: actions/download-artifact@v4
              with:
                  name: atlas-python-package-distributions
                  path: dist/
            - name: Publish distribution 📦 to PyPI
              uses: pypa/gh-action-pypi-publish@release/v1
              with:
                  user: __token__
                  password: ${{ secrets.PYPI_API_TOKEN }}

    python_fudster_publish:
        needs: ['deploy', 'alter', 'python_fudster_build']
        name: Fudster Pypi Publish
        if: needs.alter.outputs.fudster == 'true'
        runs-on: ubuntu-latest
        environment:
            name: pypi
            url: https://pypi.org/p/fudster
        permissions:
            id-token: write
        steps:
            - name: Download all the dists
              uses: actions/download-artifact@v4
              with:
                  name: fudster-python-package-distributions
                  path: dist/
            - name: Publish distribution 📦 to PyPI
              uses: pypa/gh-action-pypi-publish@release/v1
              with:
                  user: __token__
                  password: ${{ secrets.PYPI_API_SCOPE_TOKEN }}
