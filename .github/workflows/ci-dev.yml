name: CI - Dev

on:
    push:
        branches:
            - 'dev'
    pull_request:
        branches:
            - 'main'
        types: [opened, synchronize, reopened]

jobs:
    dev_to_main_pr:
        name: 'Create/Update Dev to Main PR'
        runs-on: ubuntu-latest
        if: github.event_name == 'push' && github.ref_name == 'dev'
        permissions:
            contents: read
            pull-requests: write
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Check if dev→main PR exists
              id: check_pr
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const existingPRs = await github.rest.pulls.list({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        head: `${context.repo.owner}:dev`,
                        base: 'main',
                        state: 'open'
                      });

                      if (existingPRs.data.length > 0) {
                        console.log(`Found existing PR: #${existingPRs.data[0].number}`);
                        return {
                          exists: true,
                          number: existingPRs.data[0].number,
                          url: existingPRs.data[0].html_url
                        };
                      } else {
                        console.log('No existing dev→main PR found');
                        return { exists: false };
                      }

            - name: Create new dev→main PR
              if: fromJson(steps.check_pr.outputs.result).exists == false
              id: create_pr
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const pr = await github.rest.pulls.create({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        title: 'Release: Dev → Main',
                        head: 'dev',
                        base: 'main',
                        body: `## 🚀 Release: Dev → Main
                        
                        This PR contains accumulated changes from the dev branch ready for production.
                        
                        ### Changes will be categorized below...
                        
                        ---
                        *This PR is automatically maintained by CI*`,
                        draft: false
                      });

                      // Add labels
                      await github.rest.issues.addLabels({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: pr.data.number,
                        labels: ['auto-pr', 'release', 'dev→main']
                      });

                      console.log(`Created PR #${pr.data.number}`);
                      return { number: pr.data.number, url: pr.data.html_url };

            - name: Update PR with categorized commits
              id: update_pr
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      let prNumber = null;
                      const checkResult = ${{ toJson(steps.check_pr.outputs.result) }};
                      const createResult = ${{ toJson(steps.create_pr.outputs.result) }};
                      
                      if (checkResult && checkResult.exists) {
                        prNumber = checkResult.number;
                      } else if (createResult && createResult.number) {
                        prNumber = createResult.number;
                      }

                      if (!prNumber) {
                        console.log('No PR number available');
                        return;
                      }

                      // Get commits between main and dev
                      const comparison = await github.rest.repos.compareCommits({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        base: 'main',
                        head: 'dev'
                      });

                      const commits = comparison.data.commits;
                      console.log(`Found ${commits.length} commits`);

                      // Categorize commits
                      const categories = {
                        feat: [],
                        fix: [],
                        docs: [],
                        ci: [],
                        chore: [],
                        other: []
                      };

                      commits.forEach(commit => {
                        const message = commit.commit.message.split('\n')[0]; // First line only
                        const sha = commit.sha.substring(0, 7);
                        const commitLine = `- ${message} (\`${sha}\`)`;
                        
                        if (message.match(/^feat(\(.+\))?:/i)) {
                          categories.feat.push(commitLine);
                        } else if (message.match(/^fix(\(.+\))?:/i)) {
                          categories.fix.push(commitLine);
                        } else if (message.match(/^docs(\(.+\))?:/i)) {
                          categories.docs.push(commitLine);
                        } else if (message.match(/^ci(\(.+\))?:/i)) {
                          categories.ci.push(commitLine);
                        } else if (message.match(/^chore(\(.+\))?:/i)) {
                          categories.chore.push(commitLine);
                        } else {
                          categories.other.push(commitLine);
                        }
                      });

                      // Build PR body
                      let prBody = `## 🚀 Release: Dev → Main\n\n`;
                      prBody += `**${commits.length} commits** ready for production\n\n`;

                      if (categories.feat.length > 0) {
                        prBody += `### ✨ Features\n${categories.feat.join('\n')}\n\n`;
                      }
                      if (categories.fix.length > 0) {
                        prBody += `### 🐛 Bug Fixes\n${categories.fix.join('\n')}\n\n`;
                      }
                      if (categories.docs.length > 0) {
                        prBody += `### 📚 Documentation\n${categories.docs.join('\n')}\n\n`;
                      }
                      if (categories.ci.length > 0) {
                        prBody += `### ⚙️ CI/CD\n${categories.ci.join('\n')}\n\n`;
                      }
                      if (categories.chore.length > 0) {
                        prBody += `### 🧹 Chores\n${categories.chore.join('\n')}\n\n`;
                      }
                      if (categories.other.length > 0) {
                        prBody += `### 📦 Other Changes\n${categories.other.join('\n')}\n\n`;
                      }

                      prBody += `---\n*This PR is automatically maintained by CI*`;

                      // Update the PR
                      await github.rest.pulls.update({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        pull_number: prNumber,
                        body: prBody
                      });

                      console.log(`Updated PR #${prNumber} with categorized commits`);

    alter:
        name: 'Dev File Alterations'
        if: github.repository == 'kbve/kbve'
        uses: KBVE/kbve/.github/workflows/utils-file-alterations.yml@main
        with:
            branch: 'dev'

    validate_pr:
        name: 'Validate Dev→Main PR'
        runs-on: ubuntu-latest
        if: github.event_name == 'pull_request' && github.base_ref == 'main' && github.head_ref == 'dev'
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Validate release PR
              run: |
                  echo "Validating dev→main release PR"
                  echo "Base: ${{ github.base_ref }}"
                  echo "Head: ${{ github.head_ref }}"
                  echo "PR Number: ${{ github.event.number }}"

                  # Add any validation logic here
                  # - Check for required files
                  # - Validate version bumps
                  # - Run integration tests

                  echo "Release PR validation completed"
