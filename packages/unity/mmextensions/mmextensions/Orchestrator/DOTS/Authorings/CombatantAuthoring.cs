using Unity.Entities;
using UnityEngine;
using KBVE.MMExtensions.Orchestrator.DOTS.Common;

namespace KBVE.MMExtensions.Orchestrator.DOTS
{
    /// <summary>
    /// NOTE: This CombatantAuthoring is not currently being used in the project.
    /// It's designed for designer-configurable combatant prefabs (bosses, special NPCs, etc.).
    /// Currently, soldiers use SoldierAuthoring.cs which includes basic combatant functionality.
    /// This class is kept for future use when we need more complex, configurable combatants.
    /// </summary>
    public class CombatantAuthoring : MonoBehaviour
    {
        private class CombatantBaker : Baker<CombatantAuthoring>
        {
            public override void Bake(CombatantAuthoring authoring)
            {
                var entity = GetEntity(TransformUsageFlags.Dynamic);

                // Build flags based on authoring settings
                var flags = CombatantFlags.None;
                if (authoring.IsHostile) flags |= CombatantFlags.IsHostile;
                if (authoring.IsFriendly) flags |= CombatantFlags.IsFriendly;
                if (authoring.IsNeutral) flags |= CombatantFlags.IsNeutral;
                if (authoring.IsElite) flags |= CombatantFlags.IsElite;
                if (authoring.IsBoss) flags |= CombatantFlags.IsBoss;

                // Create CombatantData with proper field names and types matching CombatantTypeComponent.cs
                var combatantData = new CombatantData
                {
                    TemplateUlid = Ulid.ToBytes(authoring.CombatantULID), // Template ULID for this combatant type
                    Type = authoring.Type,
                    Flags = flags,
                    State = CombatantState.Idle, // Start in idle state
                    Level = authoring.Level,
                    Health = authoring.Health,
                    MaxHealth = authoring.MaxHealth,
                    Mana = authoring.Mana,
                    MaxMana = authoring.MaxMana,
                    AttackDamage = authoring.AttackDamage,
                    Defense = authoring.Defense,
                    AttackSpeed = authoring.AttackSpeed,
                    MoveSpeed = authoring.MoveSpeed,
                    DetectionRange = authoring.DetectionRange
                };

                // Add Combatant component using implicit conversion
                AddComponent(entity, new Combatant { Data = combatantData });

                // Add universal EntityComponent for hover/selection system
                // Note: Entity ULID will be generated by FactorySystem when instantiated from prefab

                // Use bitwise operations for optimal entity type assignment
                var entityType = EntityType.Monster | EntityType.Unit | EntityType.NPC | EntityType.Interactable;

                // Build behavior flags using efficient bitwise operations
                var behaviorFlags = (authoring.IsHostile ? EntityType.Enemy : 0) |
                                   (authoring.IsFriendly ? EntityType.Ally : 0) |
                                   (authoring.IsNeutral ? EntityType.Neutral : 0);

                entityType |= behaviorFlags;

                // Optimized action flags assignment
                var actionFlags = EntityActionFlags.CanInteract |
                                 (authoring.IsFriendly ? 0 : EntityActionFlags.CanAttack); // Non-friendly can attack

                var entityData = new EntityData
                {
                    Ulid = default, // Will be overwritten by FactorySystem with unique ULID
                    Type = entityType,
                    ActionFlags = actionFlags,
                    WorldPos = authoring.transform.position
                };
                AddComponent(entity, new EntityComponent { Data = entityData });

                // Add CombatantID component for identification
                AddComponent(entity, new CombatantID
                {
                    instanceUlid = Ulid.ToBytes(authoring.CombatantULID)  // Template ULID reference
                });
            }
        }

        [Header("Combatant Identity")]
        [Tooltip("ULID for this combatant template (e.g., 01JCKH7M9K2XQZW3P4R5S6T7V8)")]
        public string CombatantULID = "";

        [Header("Combatant Type")]
        [Tooltip("What type of combatant this is")]
        public CombatantType Type = CombatantType.Monster;

        [Header("Combatant Stats")]
        [Tooltip("Current level of the combatant")]
        [Range(1, 1000)]
        public int Level = 1;

        [Tooltip("Current health points")]
        [Range(0, int.MaxValue)]
        public int Health = 100;

        [Tooltip("Maximum health points")]
        [Range(1, int.MaxValue)]
        public int MaxHealth = 100;

        [Tooltip("Current mana points (for spellcasters)")]
        [Range(0, int.MaxValue)]
        public int Mana = 0;

        [Tooltip("Maximum mana points")]
        [Range(0, int.MaxValue)]
        public int MaxMana = 0;

        [Header("Combat Stats")]
        [Tooltip("Base attack damage")]
        [Range(0, int.MaxValue)]
        public int AttackDamage = 10;

        [Tooltip("Defense value")]
        [Range(0, int.MaxValue)]
        public int Defense = 5;

        [Tooltip("Attacks per second")]
        [Range(0f, 100f)]
        public float AttackSpeed = 1f;

        [Tooltip("Movement speed in units per second")]
        [Range(0f, 100f)]
        public float MoveSpeed = 3f;

        [Tooltip("Detection range for enemies")]
        [Range(0f, 1000f)]
        public float DetectionRange = 10f;

        [Header("Behavior Flags")]
        [Tooltip("Is this combatant hostile to players?")]
        public bool IsHostile = true;

        [Tooltip("Is this combatant friendly to players?")]
        public bool IsFriendly = false;

        [Tooltip("Is this combatant neutral?")]
        public bool IsNeutral = false;

        [Tooltip("Is this an elite combatant?")]
        public bool IsElite = false;

        [Tooltip("Is this a boss combatant?")]
        public bool IsBoss = false;

#if UNITY_EDITOR
        private void OnValidate()
        {
            // Ensure health doesn't exceed max
            if (Health > MaxHealth)
                Health = MaxHealth;

            // Ensure mana doesn't exceed max
            if (Mana > MaxMana)
                Mana = MaxMana;

            // Ensure valid stats
            if (Level < 1) Level = 1;
            if (MaxHealth < 1) MaxHealth = 1;
            if (AttackDamage < 0) AttackDamage = 0;
            if (Defense < 0) Defense = 0;
            if (AttackSpeed < 0f) AttackSpeed = 0f;
            if (MoveSpeed < 0f) MoveSpeed = 0f;
            if (DetectionRange < 0f) DetectionRange = 0f;

            // Ensure behavior flags are consistent (using bitwise operations for better performance)
            // Convert bools to bits for faster manipulation
            byte behaviorBits = 0;
            if (IsHostile) behaviorBits |= 1;   // bit 0: hostile
            if (IsFriendly) behaviorBits |= 2;  // bit 1: friendly
            if (IsNeutral) behaviorBits |= 4;   // bit 2: neutral

            // Hostile takes precedence over friendly
            if ((behaviorBits & 3) == 3) // both hostile and friendly
                behaviorBits &= 0xFD; // clear friendly bit (11111101)

            // Default to neutral if no behavior set
            if (behaviorBits == 0)
                behaviorBits = 4; // set neutral bit

            // Convert back to bools
            IsHostile = (behaviorBits & 1) != 0;
            IsFriendly = (behaviorBits & 2) != 0;
            IsNeutral = (behaviorBits & 4) != 0;
        }
#endif
    }
}