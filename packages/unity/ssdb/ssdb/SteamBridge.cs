#if !UNITY_WEBGL && !UNITY_IOS && !UNITY_ANDROID

using System;
using UnityEngine;
using OneJS;
using R3;
using VContainer;
using VContainer.Unity;
using KBVE.SSDB.Steam;

/// <summary>
/// OneJS Bridge for Steam user profile data
/// This class should be attached to a GameObject in the scene for OneJS to reference
/// It syncs with the VContainer-injected SteamUserProfiles instance
/// Uses simpler namespace for OneJS Source Generator compatibility
/// </summary>
public partial class SteamBridge : MonoBehaviour
{
    private SteamUserProfiles _steamUserProfiles;
    private readonly CompositeDisposable _disposables = new();
    
    #region OneJS EventfulProperty Fields
    
    // EventfulProperty fields for OneJS bidirectional binding
    // OneJS Source Generator will auto-create properties and events
    [EventfulProperty] string _jsUserName = string.Empty;
    [EventfulProperty] string _jsUserStatus = "Offline";
    [EventfulProperty] string _jsUserSteamId = string.Empty;
    [EventfulProperty] bool _jsIsOnline = false;
    [EventfulProperty] bool _jsIsInGame = false;
    [EventfulProperty] int _jsUserLevel = 0;
    [EventfulProperty] string _jsCurrentGameName = string.Empty;
    [EventfulProperty] int _jsFriendCount = 0;
    [EventfulProperty] Texture2D _jsUserAvatar = null;
    
    // Auto-generated by EventfulProperty:
    // - public string JsUserName { get; set; }
    // - public event Action<string> OnJsUserNameChanged;
    // - etc. for all fields above
    
    #endregion

    #region Unity Lifecycle
    
    private void Start()
    {
        // Find the SteamUserProfiles instance from VContainer
        InitializeSteamConnection();
    }
    
    private void OnDestroy()
    {
        _disposables.Dispose();
    }
    
    #endregion
    
    #region Initialization
    
    private void InitializeSteamConnection()
    {
        // Try to find VContainer's SteamUserProfiles instance
        // This will wait until VContainer has initialized the service
        StartCoroutine(WaitForSteamUserProfiles());
    }
    
    private System.Collections.IEnumerator WaitForSteamUserProfiles()
    {
        // Wait until we can resolve SteamUserProfiles from VContainer
        while (_steamUserProfiles == null)
        {
            try
            {
                // Method 1: Try to find it through VContainer's resolver
                var lifetimeScope = FindAnyObjectByType<LifetimeScope>();
                if (lifetimeScope?.Container != null)
                {
                    if (lifetimeScope.Container.TryResolve<SteamUserProfiles>(out var steamProfiles))
                    {
                        _steamUserProfiles = steamProfiles;
                        Debug.Log("[SteamBridge] Found SteamUserProfiles through VContainer");
                        InitializeBindings();
                        break;
                    }
                }
                
                // Method 2: Try to find it as a component in the scene
                var steamProfilesComponent = FindAnyObjectByType<SteamUserProfiles>();
                if (steamProfilesComponent != null)
                {
                    _steamUserProfiles = steamProfilesComponent;
                    Debug.Log("[SteamBridge] Found SteamUserProfiles as scene component");
                    InitializeBindings();
                    break;
                }
            }
            catch (System.Exception ex)
            {
                Debug.LogWarning($"[SteamBridge] Error finding SteamUserProfiles: {ex.Message}");
            }
            
            yield return new WaitForSeconds(0.5f); // Check every 500ms
        }
    }
    
    #endregion
    
    #region Data Binding
    
    private void InitializeBindings()
    {
        if (_steamUserProfiles == null) return;
        
        Debug.Log("[SteamBridge] Initializing OneJS bindings with SteamUserProfiles");
        
        // Subscribe to all reactive properties from SteamUserProfiles
        // Use auto-generated properties from EventfulProperty
        _steamUserProfiles.UserName.Subscribe(value => 
        {
            JsUserName = value; // Auto-generated property
        }).AddTo(_disposables);
        
        _steamUserProfiles.UserStatus.Subscribe(value => 
        {
            JsUserStatus = value; // Auto-generated property
        }).AddTo(_disposables);
        
        _steamUserProfiles.UserSteamId.Subscribe(value => 
        {
            JsUserSteamId = value; // Auto-generated property
        }).AddTo(_disposables);
        
        _steamUserProfiles.IsOnline.Subscribe(value => 
        {
            JsIsOnline = value; // Auto-generated property
        }).AddTo(_disposables);
        
        _steamUserProfiles.IsInGame.Subscribe(value => 
        {
            JsIsInGame = value; // Auto-generated property
        }).AddTo(_disposables);
        
        _steamUserProfiles.UserLevel.Subscribe(value => 
        {
            JsUserLevel = value; // Auto-generated property
        }).AddTo(_disposables);
        
        _steamUserProfiles.CurrentGameName.Subscribe(value => 
        {
            JsCurrentGameName = value; // Auto-generated property
        }).AddTo(_disposables);
        
        _steamUserProfiles.FriendCount.Subscribe(value => 
        {
            JsFriendCount = value; // Auto-generated property
        }).AddTo(_disposables);
        
        _steamUserProfiles.UserAvatar.Subscribe(value => 
        {
            JsUserAvatar = value; // Auto-generated property
        }).AddTo(_disposables);
    }
    
    #endregion
    
    #region OneJS Public Methods
    
    /// <summary>
    /// Force refresh all user data from Steam
    /// </summary>
    public void JsRefreshAllData()
    {
        if (_steamUserProfiles != null)
        {
            _steamUserProfiles.RefreshUserData();
            _steamUserProfiles.RefreshAvatar();
        }
    }
    
    /// <summary>
    /// Get a formatted string of user info for display
    /// </summary>
    public string JsGetUserSummary()
    {
        if (_steamUserProfiles != null)
        {
            return $"{_steamUserProfiles.UserName.Value} (Level {_steamUserProfiles.UserLevel.Value}) - {_steamUserProfiles.UserStatus.Value}";
        }
        return "Steam not available";
    }
    
    /// <summary>
    /// Check if user has a specific achievement
    /// </summary>
    public bool JsHasAchievement(string achievementId)
    {
        // This would need to be implemented with achievement checking
        // For now, return false as placeholder
        Debug.Log($"[SteamBridge] Checking achievement: {achievementId}");
        return false;
    }
    
    /// <summary>
    /// Get user's play time for current game in hours
    /// </summary>
    public float JsGetCurrentGamePlayTime()
    {
        // This would need Steam API integration for playtime
        // Return 0 as placeholder
        return 0f;
    }
    
    /// <summary>
    /// Get user's friend list count
    /// </summary>
    public int JsGetFriendCount()
    {
        return _steamUserProfiles?.FriendCount.Value ?? 0;
    }
    
    /// <summary>
    /// Check if user is playing a specific game by ID
    /// </summary>
    public bool JsIsPlayingGame(ulong gameId)
    {
        return _steamUserProfiles?.IsInGame.Value == true && 
               _steamUserProfiles?.CurrentGameId.Value == gameId;
    }
    
    /// <summary>
    /// Get connection status for debugging
    /// </summary>
    public bool JsIsConnected()
    {
        return _steamUserProfiles != null;
    }
    
    #endregion
}

#endif