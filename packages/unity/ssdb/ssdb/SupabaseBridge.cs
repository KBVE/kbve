#if !UNITY_WEBGL && !UNITY_IOS && !UNITY_ANDROID

using System;
using System.Collections.Generic;
using UnityEngine;
using OneJS;
using Puerts;
using R3;
using VContainer;
using VContainer.Unity;
using KBVE.SSDB.SupabaseFDW;
using KBVE.SSDB.SupabaseFDW.UIUX;
using Cysharp.Threading.Tasks;
using System.Threading;
using MoreMountains.Tools;
using Supabase.Gotrue;
using Supabase.Realtime;
using Supabase.Realtime.Models;
using KBVE.SSDB;

/// <summary>
/// OneJS Bridge for Supabase services
/// This class should be attached to a GameObject in the scene for OneJS to reference
/// It syncs with the VContainer-injected Supabase services
/// Uses simpler namespace for OneJS Source Generator compatibility
/// </summary>
public partial class SupabaseBridge : MonoBehaviour, IInitializable
{
    [Inject]
    private ISupabaseInstance _supabaseInstance;

    [Inject]
    private SupabaseAuthFDW _authFDW;

    [Inject]
    private SupabaseRealtimeFDW _realtimeFDW;

    [Inject]
    private SupabaseBroadcastFDW _broadcastFDW;

    [Inject]
    private SupabaseUIUX _uiux;

    [Inject]
    private IObjectResolver _container;

    private readonly CompositeDisposable _disposables = new();

    [Header("Debug Settings")]
    [SerializeField] private bool enableDiagnostics = true;

    /// <summary>
    /// Helper method to log diagnostic messages only when diagnostics are enabled
    /// </summary>
    private void LogDiagnostic(string message)
    {
        if (enableDiagnostics)
        {
            Debug.Log($"[SupabaseBridge] {message}");
        }
    }

    /// <summary>
    /// Helper method to log diagnostic warnings only when diagnostics are enabled
    /// </summary>
    private void LogDiagnosticWarning(string message)
    {
        if (enableDiagnostics)
        {
            Debug.LogWarning($"[SupabaseBridge] {message}");
        }
    }

    /// <summary>
    /// Helper method to log diagnostic errors only when diagnostics are enabled
    /// </summary>
    private void LogDiagnosticError(string message)
    {
        if (enableDiagnostics)
        {
            Debug.LogError($"[SupabaseBridge] {message}");
        }
    }

    #region OneJS EventfulProperty Fields

    // EventfulProperty fields for OneJS bidirectional binding
    // OneJS Source Generator will auto-create properties and events

    // Authentication State
    [EventfulProperty] bool _jsIsAuthenticated = false;
    [EventfulProperty] string _jsCurrentUserEmail = string.Empty;
    [EventfulProperty] string _jsCurrentUserId = string.Empty;
    [EventfulProperty] string _jsCurrentUserRole = string.Empty;

    // Connection State
    [EventfulProperty] bool _jsIsInitialized = false;
    [EventfulProperty] bool _jsIsOnline = false;
    [EventfulProperty] string _jsConnectionStatus = "Disconnected";

    // Real-time State
    [EventfulProperty] bool _jsIsRealtimeConnected = false;
    [EventfulProperty] string _jsRealtimeConnectionState = "disconnected";
    [EventfulProperty] int _jsActiveChannelCount = 0;
    [EventfulProperty] List<string> _jsActiveChannels = new();

    // UI State (from SupabaseUIUX)
    [EventfulProperty] bool _jsIsLoading = false;
    [EventfulProperty] string _jsCurrentUIState = "SignedOut";
    [EventfulProperty] string _jsStatusMessage = string.Empty;
    [EventfulProperty] bool _jsShowLoginForm = true;

    // Input Fields (from SupabaseUIUX)
    [EventfulProperty] string _jsEmailInput = string.Empty;
    [EventfulProperty] string _jsPasswordInput = string.Empty;
    [EventfulProperty] bool _jsIsEmailValid = false;
    [EventfulProperty] bool _jsIsPasswordValid = false;
    [EventfulProperty] bool _jsCanSubmit = false;

    // Broadcasting State
    [EventfulProperty] bool _jsIsBroadcasting = false;
    [EventfulProperty] string _jsSessionId = string.Empty;
    [EventfulProperty] string _jsBroadcastChannelName = "demo";

    // Error Handling
    [EventfulProperty] string _jsLastError = string.Empty;
    [EventfulProperty] string _jsAuthError = string.Empty;
    [EventfulProperty] string _jsRealtimeError = string.Empty;

    // Auto-generated by EventfulProperty:
    // - public bool JsIsAuthenticated { get; set; }
    // - public event Action<bool> OnJsIsAuthenticatedChanged;
    // - etc. for all fields above

    #endregion

    #region VContainer Lifecycle

    public void Initialize()
    {
        Debug.Log("[SupabaseBridge] Initialize() called by VContainer");
        LogDiagnostic("VContainer Initialize() called");

        // Run diagnostics first to understand the container state (only if enabled)
        if (enableDiagnostics)
        {
            DiagnoseContainerState();
        }

        // Try to resolve services through injected container if injection didn't work
        if (_supabaseInstance == null && _container != null)
        {
            LogDiagnostic("Attempting to resolve ISupabaseInstance through injected container");
            if (_container.TryResolve<ISupabaseInstance>(out var supabaseInstance))
            {
                _supabaseInstance = supabaseInstance;
                LogDiagnostic("✓ Successfully resolved ISupabaseInstance through injected container");
            }
            else
            {
                LogDiagnosticWarning("✗ Failed to resolve ISupabaseInstance through injected container");
            }
        }

        // Similar resolution for other services
        if (_authFDW == null && _container != null)
        {
            if (_container.TryResolve<SupabaseAuthFDW>(out var authFDW))
            {
                _authFDW = authFDW;
                LogDiagnostic("✓ Successfully resolved SupabaseAuthFDW");
            }
        }

        if (_realtimeFDW == null && _container != null)
        {
            if (_container.TryResolve<SupabaseRealtimeFDW>(out var realtimeFDW))
            {
                _realtimeFDW = realtimeFDW;
                LogDiagnostic("✓ Successfully resolved SupabaseRealtimeFDW");
            }
        }

        if (_broadcastFDW == null && _container != null)
        {
            if (_container.TryResolve<SupabaseBroadcastFDW>(out var broadcastFDW))
            {
                _broadcastFDW = broadcastFDW;
                LogDiagnostic("✓ Successfully resolved SupabaseBroadcastFDW");
            }
        }

        if (_uiux == null && _container != null)
        {
            if (_container.TryResolve<SupabaseUIUX>(out var uiux))
            {
                _uiux = uiux;
                LogDiagnostic("✓ Successfully resolved SupabaseUIUX");
            }
        }

        if (_supabaseInstance != null)
        {
            Debug.Log("[SupabaseBridge] Supabase services available, calling InitializeWithInjectedServices()");
            LogDiagnostic("Supabase services available, initializing with injected services");
            InitializeWithInjectedServices().Forget();
        }
        else
        {
            LogDiagnosticWarning("Supabase services not available after VContainer initialization, will fall back to manual search");
        }
    }

    #endregion

    #region Unity Lifecycle

    private void Start()
    {
        Debug.Log("[SupabaseBridge] Start() called - checking VContainer injection status");

        // Fallback if VContainer initialization didn't work
        if (_supabaseInstance == null)
        {
            Debug.LogWarning("[SupabaseBridge] Supabase services not available via VContainer injection, attempting manual search");
            LogDiagnosticWarning("Supabase services not available, attempting manual search");
            InitializeSupabaseConnection().Forget();
        }
        else
        {
            Debug.Log("[SupabaseBridge] VContainer injection successful, _supabaseInstance is available");
        }
    }

    private async UniTaskVoid InitializeWithInjectedServices()
    {
        try
        {
            Debug.Log($"[SupabaseBridge] InitializeWithInjectedServices() - Supabase initialized: {_supabaseInstance.Initialized.Value}");

            // Wait for Supabase to be initialized
            if (!_supabaseInstance.Initialized.Value)
            {
                Debug.Log("[SupabaseBridge] Waiting for Supabase initialization...");
                await WaitForSupabaseInitializationAsync(this.GetCancellationTokenOnDestroy());
            }

            Debug.Log("[SupabaseBridge] Calling InitializeBindings()");
            InitializeBindings();

            Debug.Log("[SupabaseBridge] Successfully initialized with injected services");
            LogDiagnostic("Successfully initialized with injected services");
        }
        catch (Exception ex)
        {
            LogDiagnosticError($"Initialization error: {ex.Message}");
        }
    }

    private void OnDestroy()
    {
        _disposables.Dispose();
    }

    #endregion

    #region Initialization

    private async UniTaskVoid InitializeSupabaseConnection()
    {
        try
        {
            // Use UniTask for non-blocking async initialization
            await WaitForSupabaseServicesAsync();
        }
        catch (OperationCanceledException)
        {
            LogDiagnosticWarning("Supabase connection initialization was cancelled or timed out");
        }
        catch (Exception ex)
        {
            LogDiagnosticError($"Failed to initialize Supabase connection: {ex.Message}");
        }
    }

    private async UniTask WaitForSupabaseServicesAsync()
    {
        var destroyCancellationToken = this.GetCancellationTokenOnDestroy();

        try
        {
            LogDiagnostic("Starting async search for Supabase services...");

            // Run diagnostics to help troubleshoot container issues
            DiagnoseContainerState();

            // Use UniTask.WaitUntil for finding services with timeout
            var findServicesTask = FindSupabaseServicesAsync(destroyCancellationToken);
            var timeoutTask = UniTask.Delay(TimeSpan.FromSeconds(60), cancellationToken: destroyCancellationToken);

            var completedTaskIndex = await UniTask.WhenAny(findServicesTask, timeoutTask);

            if (completedTaskIndex == 1) // Timeout
            {
                LogDiagnosticWarning("Timeout finding Supabase services");
                return;
            }

            // Services found, wait for initialization and then setup bindings
            if (_supabaseInstance != null)
            {
                await WaitForSupabaseInitializationAsync(destroyCancellationToken);
                InitializeBindings();
            }
        }
        catch (OperationCanceledException)
        {
            LogDiagnostic("Service search cancelled");
        }
    }

    private async UniTask FindSupabaseServicesAsync(CancellationToken cancellationToken)
    {
        await UniTask.WaitUntil(() =>
        {
            try
            {
                // First try to use injected container if available
                if (_container != null)
                {
                    LogDiagnostic("Using injected container for service resolution");

                    // Try to resolve all Supabase services
                    if (_supabaseInstance == null && _container.TryResolve<ISupabaseInstance>(out var supabaseInstance))
                    {
                        _supabaseInstance = supabaseInstance;
                        LogDiagnostic("Found ISupabaseInstance through injected container");
                    }

                    if (_authFDW == null && _container.TryResolve<SupabaseAuthFDW>(out var authFDW))
                    {
                        _authFDW = authFDW;
                        LogDiagnostic("Found SupabaseAuthFDW through injected container");
                    }

                    if (_realtimeFDW == null && _container.TryResolve<SupabaseRealtimeFDW>(out var realtimeFDW))
                    {
                        _realtimeFDW = realtimeFDW;
                        LogDiagnostic("Found SupabaseRealtimeFDW through injected container");
                    }

                    if (_broadcastFDW == null && _container.TryResolve<SupabaseBroadcastFDW>(out var broadcastFDW))
                    {
                        _broadcastFDW = broadcastFDW;
                        LogDiagnostic("Found SupabaseBroadcastFDW through injected container");
                    }

                    if (_uiux == null && _container.TryResolve<SupabaseUIUX>(out var uiux))
                    {
                        _uiux = uiux;
                        LogDiagnostic("Found SupabaseUIUX through injected container");
                    }

                    // Return true when we have at least the core service
                    if (_supabaseInstance != null) return true;
                }

                // Fallback: Find the specific SSDBLifetimeScope instead of any LifetimeScope
                var ssdbScope = FindAnyObjectByType<SSDBLifetimeScope>();
                if (ssdbScope != null && ssdbScope.Container != null)
                {
                    LogDiagnostic("Using SSDBLifetimeScope container for service resolution");

                    // Find all Supabase services
                    if (_supabaseInstance == null && ssdbScope.Container.TryResolve<ISupabaseInstance>(out var supabaseInstance))
                    {
                        _supabaseInstance = supabaseInstance;
                        LogDiagnostic("Found ISupabaseInstance through SSDBLifetimeScope");
                    }

                    if (_authFDW == null && ssdbScope.Container.TryResolve<SupabaseAuthFDW>(out var authFDW))
                    {
                        _authFDW = authFDW;
                        LogDiagnostic("Found SupabaseAuthFDW through SSDBLifetimeScope");
                    }

                    if (_realtimeFDW == null && ssdbScope.Container.TryResolve<SupabaseRealtimeFDW>(out var realtimeFDW))
                    {
                        _realtimeFDW = realtimeFDW;
                        LogDiagnostic("Found SupabaseRealtimeFDW through SSDBLifetimeScope");
                    }

                    if (_broadcastFDW == null && ssdbScope.Container.TryResolve<SupabaseBroadcastFDW>(out var broadcastFDW))
                    {
                        _broadcastFDW = broadcastFDW;
                        LogDiagnostic("Found SupabaseBroadcastFDW through SSDBLifetimeScope");
                    }

                    if (_uiux == null && ssdbScope.Container.TryResolve<SupabaseUIUX>(out var uiux))
                    {
                        _uiux = uiux;
                        LogDiagnostic("Found SupabaseUIUX through SSDBLifetimeScope");
                    }

                    // Return true when we have at least the core service
                    return _supabaseInstance != null;
                }

                return _supabaseInstance != null;
            }
            catch (Exception ex)
            {
                LogDiagnosticWarning($"Error in service search: {ex.Message}");
                return false;
            }
        }, cancellationToken: cancellationToken);
    }

    private async UniTask WaitForSupabaseInitializationAsync(CancellationToken cancellationToken)
    {
        if (_supabaseInstance == null)
        {
            Debug.LogError("[SupabaseBridge] WaitForSupabaseInitializationAsync: _supabaseInstance is null!");
            return;
        }

        Debug.Log($"[SupabaseBridge] WaitForSupabaseInitializationAsync: Starting wait, current value: {_supabaseInstance.Initialized.Value}");
        LogDiagnostic("Waiting for Supabase to be initialized...");

        try
        {
            // Use UniTask.WaitUntil with timeout for better async handling
            var initTask = UniTask.WaitUntil(
                () => {
                    var currentValue = _supabaseInstance.Initialized.Value;
                    if (currentValue) Debug.Log("[SupabaseBridge] WaitUntil condition met - Supabase is initialized!");
                    return currentValue;
                },
                cancellationToken: cancellationToken
            );

            var timeoutTask = UniTask.Delay(TimeSpan.FromSeconds(30), cancellationToken: cancellationToken);

            Debug.Log("[SupabaseBridge] Starting UniTask.WhenAny wait...");
            var completedTaskIndex = await UniTask.WhenAny(initTask, timeoutTask);

            if (completedTaskIndex == 0) // Initialized
            {
                Debug.Log("[SupabaseBridge] Supabase initialization completed successfully!");
                LogDiagnostic($"Supabase initialized successfully!");
            }
            else
            {
                Debug.LogWarning("[SupabaseBridge] Supabase initialization timeout after 30 seconds");
                LogDiagnosticWarning("Supabase initialization timeout");
            }
        }
        catch (OperationCanceledException)
        {
            LogDiagnostic("Supabase initialization wait cancelled");
        }
    }

    /// <summary>
    /// Diagnostic method to help troubleshoot VContainer setup
    /// </summary>
    private void DiagnoseContainerState()
    {
        try
        {
            LogDiagnostic("=== VContainer Diagnostics ===");

            // Check injected container
            if (_container != null)
            {
                LogDiagnostic("✓ IObjectResolver was injected successfully");
                LogDiagnostic($"Container type: {_container.GetType().Name}");
            }
            else
            {
                LogDiagnosticWarning("✗ IObjectResolver was NOT injected");
            }

            // Check all LifetimeScopes in scene
            var allScopes = FindObjectsByType<LifetimeScope>(FindObjectsSortMode.None);
            LogDiagnostic($"Found {allScopes.Length} LifetimeScopes in scene:");

            foreach (var scope in allScopes)
            {
                LogDiagnostic($"  - {scope.name} ({scope.GetType().Name})");
                if (scope.Container != null)
                {
                    var hasSupabase = scope.Container.TryResolve<ISupabaseInstance>(out _);
                    var hasAuth = scope.Container.TryResolve<SupabaseAuthFDW>(out _);
                    var hasRealtime = scope.Container.TryResolve<SupabaseRealtimeFDW>(out _);
                    LogDiagnostic($"    Supabase Instance: {(hasSupabase ? "✓" : "✗")}");
                    LogDiagnostic($"    Auth FDW: {(hasAuth ? "✓" : "✗")}");
                    LogDiagnostic($"    Realtime FDW: {(hasRealtime ? "✓" : "✗")}");
                }
                else
                {
                    LogDiagnosticWarning($"    Container is NULL");
                }
            }

            // Check specifically for SSDBLifetimeScope
            var ssdbScope = FindAnyObjectByType<SSDBLifetimeScope>();
            if (ssdbScope != null)
            {
                LogDiagnostic($"✓ Found SSDBLifetimeScope: {ssdbScope.name}");
                if (ssdbScope.Container != null)
                {
                    LogDiagnostic("✓ SSDBLifetimeScope has active container");
                }
                else
                {
                    LogDiagnosticWarning("✗ SSDBLifetimeScope container is NULL");
                }
            }
            else
            {
                LogDiagnosticWarning("✗ SSDBLifetimeScope not found in scene");
            }

            LogDiagnostic("=== End Diagnostics ===");
        }
        catch (Exception ex)
        {
            LogDiagnosticError($"Error during diagnostics: {ex.Message}");
        }
    }

    #endregion

    #region Data Binding

    private void InitializeBindings()
    {
        Debug.Log("[SupabaseBridge] InitializeBindings() called");

        if (_supabaseInstance == null)
        {
            Debug.LogError("[SupabaseBridge] Cannot initialize bindings - ISupabaseInstance is null!");
            LogDiagnosticError("Cannot initialize bindings - ISupabaseInstance is null!");
            return;
        }

        Debug.Log($"[SupabaseBridge] Initializing bindings - Current Supabase state: Initialized={_supabaseInstance.Initialized.Value}, Online={_supabaseInstance.Online.Value}");
        LogDiagnostic("✓ Initializing OneJS bindings with Supabase services");

        // Subscribe to Supabase Instance properties
        Debug.Log("[SupabaseBridge] Setting up Initialized property subscription");
        _supabaseInstance.Initialized.Subscribe(value =>
        {
            Debug.Log($"[SupabaseBridge] Supabase Initialized state changed: {value} -> Setting JsIsInitialized = {value}");
            LogDiagnostic($"Supabase Initialized state changed: {value}");
            JsIsInitialized = value; // Auto-generated property
        }).AddTo(_disposables);

        _supabaseInstance.Online.Subscribe(value =>
        {
            LogDiagnostic($"Supabase Online state changed: {value}");
            JsIsOnline = value; // Auto-generated property
        }).AddTo(_disposables);

        _supabaseInstance.CurrentUser.Subscribe(user =>
        {
            LogDiagnostic($"Current user changed: {user?.Email ?? "null"}");
            JsCurrentUserEmail = user?.Email ?? string.Empty;
            JsCurrentUserId = user?.Id ?? string.Empty;
            // Extract role from user metadata if available
            JsCurrentUserRole = user?.UserMetadata?.TryGetValue("role", out var role) == true ? role.ToString() : string.Empty;
        }).AddTo(_disposables);

        _supabaseInstance.CurrentSession.Subscribe(session =>
        {
            LogDiagnostic($"Current session changed: {(session != null ? "Active" : "None")}");
            // Session changes are primarily handled through user changes
        }).AddTo(_disposables);

        // Subscribe to auth state changes
        _supabaseInstance.AuthStateStream.Subscribe(authEvent =>
        {
            LogDiagnostic($"Auth state changed: {authEvent.State}");
            HandleAuthStateChange(authEvent);
        }).AddTo(_disposables);

        // Subscribe to Auth FDW properties if available
        if (_authFDW != null)
        {
            _authFDW.IsAuthenticated.Subscribe(value =>
            {
                LogDiagnostic($"Auth FDW authenticated state changed: {value}");
                JsIsAuthenticated = value; // Auto-generated property
            }).AddTo(_disposables);

            _authFDW.ErrorMessage.Subscribe(error =>
            {
                LogDiagnostic($"Auth FDW error: {error}");
                JsAuthError = error;
                if (!string.IsNullOrEmpty(error))
                {
                    JsLastError = error;
                }
            }).AddTo(_disposables);
        }

        // Subscribe to Realtime FDW properties if available
        if (_realtimeFDW != null)
        {
            _realtimeFDW.IsConnected.Subscribe(value =>
            {
                LogDiagnostic($"Realtime connected state changed: {value}");
                JsIsRealtimeConnected = value; // Auto-generated property
            }).AddTo(_disposables);

            _realtimeFDW.ConnectionState.Subscribe(state =>
            {
                LogDiagnostic($"Realtime connection state changed: {state}");
                JsRealtimeConnectionState = state; // Auto-generated property
            }).AddTo(_disposables);

            _realtimeFDW.ErrorMessage.Subscribe(error =>
            {
                LogDiagnostic($"Realtime FDW error: {error}");
                JsRealtimeError = error;
                if (!string.IsNullOrEmpty(error))
                {
                    JsLastError = error;
                }
            }).AddTo(_disposables);

            // Update active channels count
            UpdateActiveChannelsInfo();
        }

        // Subscribe to Broadcast FDW properties if available
        if (_broadcastFDW != null)
        {
            _broadcastFDW.IsBroadcasting.Subscribe(value =>
            {
                LogDiagnostic($"Broadcasting state changed: {value}");
                JsIsBroadcasting = value; // Auto-generated property
            }).AddTo(_disposables);

            _broadcastFDW.SessionId.Subscribe(sessionId =>
            {
                LogDiagnostic($"Session ID changed: {sessionId}");
                JsSessionId = sessionId; // Auto-generated property
            }).AddTo(_disposables);

            _broadcastFDW.BroadcastChannelName.Subscribe(channelName =>
            {
                LogDiagnostic($"Broadcast channel name changed: {channelName}");
                JsBroadcastChannelName = channelName; // Auto-generated property
            }).AddTo(_disposables);
        }

        // Subscribe to UIUX properties if available
        if (_uiux != null)
        {
            _uiux.IsLoading.Subscribe(value =>
            {
                LogDiagnostic($"UIUX loading state changed: {value}");
                JsIsLoading = value; // Auto-generated property
            }).AddTo(_disposables);

            _uiux.CurrentAuthState.Subscribe(state =>
            {
                LogDiagnostic($"Auth state changed: {state}");
                JsCurrentUIState = state.ToString(); // Auto-generated property
            }).AddTo(_disposables);

            _uiux.StatusMessage.Subscribe(message =>
            {
                LogDiagnostic($"UIUX status message changed: {message}");
                JsStatusMessage = message; // Auto-generated property
            }).AddTo(_disposables);

            _uiux.ShowLoginForm.Subscribe(value =>
            {
                LogDiagnostic($"UIUX show login form changed: {value}");
                JsShowLoginForm = value; // Auto-generated property
            }).AddTo(_disposables);

            _uiux.EmailInput.Subscribe(email =>
            {
                JsEmailInput = email; // Auto-generated property
            }).AddTo(_disposables);

            _uiux.PasswordInput.Subscribe(password =>
            {
                JsPasswordInput = password; // Auto-generated property
            }).AddTo(_disposables);

            _uiux.IsEmailValid.Subscribe(value =>
            {
                JsIsEmailValid = value; // Auto-generated property
            }).AddTo(_disposables);

            _uiux.IsPasswordValid.Subscribe(value =>
            {
                JsIsPasswordValid = value; // Auto-generated property
            }).AddTo(_disposables);

            _uiux.CanSubmit.Subscribe(value =>
            {
                JsCanSubmit = value; // Auto-generated property
            }).AddTo(_disposables);
        }

        // Initialize current values immediately
        JsIsInitialized = _supabaseInstance.Initialized.Value;
        JsIsOnline = _supabaseInstance.Online.Value;
        JsCurrentUserEmail = _supabaseInstance.CurrentUser.Value?.Email ?? string.Empty;
        JsCurrentUserId = _supabaseInstance.CurrentUser.Value?.Id ?? string.Empty;

        // Check both AuthFDW and the actual session for authentication state
        if (_authFDW != null)
        {
            JsIsAuthenticated = _authFDW.IsAuthenticated.Value;
        }
        else if (_supabaseInstance?.CurrentSession?.Value != null)
        {
            // Fallback: check the session directly if AuthFDW isn't available
            JsIsAuthenticated = true;
            LogDiagnostic("Set JsIsAuthenticated=true based on existing session");
        }

        if (_realtimeFDW != null)
        {
            JsIsRealtimeConnected = _realtimeFDW.IsConnected.Value;
            JsRealtimeConnectionState = _realtimeFDW.ConnectionState.Value;
        }

        if (_broadcastFDW != null)
        {
            JsIsBroadcasting = _broadcastFDW.IsBroadcasting.Value;
            JsSessionId = _broadcastFDW.SessionId.Value;
            JsBroadcastChannelName = _broadcastFDW.BroadcastChannelName.Value;
        }

        if (_uiux != null)
        {
            JsIsLoading = _uiux.IsLoading.Value;
            JsCurrentUIState = _uiux.CurrentAuthState.Value.ToString();
            JsStatusMessage = _uiux.StatusMessage.Value;
            JsShowLoginForm = _uiux.ShowLoginForm.Value;
            JsEmailInput = _uiux.EmailInput.Value;
            JsPasswordInput = _uiux.PasswordInput.Value;
            JsIsEmailValid = _uiux.IsEmailValid.Value;
            JsIsPasswordValid = _uiux.IsPasswordValid.Value;
            JsCanSubmit = _uiux.CanSubmit.Value;
        }

        // Set initial connection status
        UpdateConnectionStatus();

        LogDiagnostic($"✓ Initial values set - Initialized: {JsIsInitialized}, Online: {JsIsOnline}, Authenticated: {JsIsAuthenticated}");
    }

    private void HandleAuthStateChange(AuthStateChangedEvent authEvent)
    {
        switch (authEvent.State)
        {
            case Supabase.Gotrue.Constants.AuthState.SignedIn:
                LogDiagnostic("User signed in");
                JsAuthError = string.Empty;
                // Explicitly set authenticated state
                JsIsAuthenticated = true;
                UpdateConnectionStatus();
                break;

            case Supabase.Gotrue.Constants.AuthState.SignedOut:
                LogDiagnostic("User signed out");
                JsAuthError = string.Empty;
                // Explicitly set authenticated state
                JsIsAuthenticated = false;
                UpdateConnectionStatus();
                break;

            case Supabase.Gotrue.Constants.AuthState.UserUpdated:
                LogDiagnostic("User updated");
                break;

            case Supabase.Gotrue.Constants.AuthState.PasswordRecovery:
                LogDiagnostic("Password recovery initiated");
                break;

            case Supabase.Gotrue.Constants.AuthState.TokenRefreshed:
                LogDiagnostic("Token refreshed");
                break;
        }
    }

    private void UpdateConnectionStatus()
    {
        if (!JsIsInitialized)
        {
            JsConnectionStatus = "Initializing";
        }
        else if (!JsIsOnline)
        {
            JsConnectionStatus = "Offline";
        }
        else if (JsIsAuthenticated)
        {
            JsConnectionStatus = $"Authenticated as {JsCurrentUserEmail}";
        }
        else
        {
            JsConnectionStatus = "Online (Anonymous)";
        }
    }

    private void UpdateActiveChannelsInfo()
    {
        if (_realtimeFDW != null)
        {
            try
            {
                var channels = _realtimeFDW.GetAllChannels();
                JsActiveChannelCount = channels.Count;
                JsActiveChannels = new List<string>(channels.Keys);
                LogDiagnostic($"Updated active channels: {JsActiveChannelCount} channels");
            }
            catch (Exception ex)
            {
                LogDiagnosticWarning($"Error updating channel info: {ex.Message}");
            }
        }
    }

    #endregion

    #region OneJS Public Methods - Authentication

    /// <summary>
    /// Sign in with email and password
    /// </summary>
    public async UniTask<bool> JsSignInAsync(string email, string password)
    {
        if (_authFDW == null)
        {
            LogDiagnosticError("Auth FDW not available");
            JsLastError = "Authentication service not available";
            return false;
        }

        try
        {
            LogDiagnostic($"Signing in user: {email}");
            var result = await _authFDW.SignInWithEmailAsync(email, password, this.GetCancellationTokenOnDestroy());
            LogDiagnostic($"Sign in result: {result}");
            if (result) JsRefreshAuthState();
            return result;
        }
        catch (Exception ex)
        {
            LogDiagnosticError($"Sign in failed: {ex.Message}");
            JsLastError = ex.Message;
            return false;
        }
    }

    /// <summary>
    /// Sign up with email and password
    /// </summary>
    public async UniTask<bool> JsSignUpAsync(string email, string password)
    {
        if (_authFDW == null)
        {
            LogDiagnosticError("Auth FDW not available");
            JsLastError = "Authentication service not available";
            return false;
        }

        try
        {
            LogDiagnostic($"Signing up user: {email}");
            var result = await _authFDW.SignUpWithEmailAsync(email, password, this.GetCancellationTokenOnDestroy());
            LogDiagnostic($"Sign up result: {result}");
            if (result) JsRefreshAuthState();
            return result;
        }
        catch (Exception ex)
        {
            LogDiagnosticError($"Sign up failed: {ex.Message}");
            JsLastError = ex.Message;
            return false;
        }
    }

    /// <summary>
    /// Sign out current user
    /// </summary>
    public async UniTask<bool> JsSignOutAsync()
    {
        if (_authFDW == null)
        {
            LogDiagnosticError("Auth FDW not available");
            JsLastError = "Authentication service not available";
            return false;
        }

        try
        {
            LogDiagnostic("Signing out user");
            var result = await _authFDW.SignOutAsync(this.GetCancellationTokenOnDestroy());
            LogDiagnostic($"Sign out result: {result}");
            return result;
        }
        catch (Exception ex)
        {
            LogDiagnosticError($"Sign out failed: {ex.Message}");
            JsLastError = ex.Message;
            return false;
        }
    }

    /// <summary>
    /// Refresh the current session
    /// </summary>
    public async UniTask<bool> JsRefreshSessionAsync()
    {
        if (_authFDW == null)
        {
            LogDiagnosticError("Auth FDW not available");
            JsLastError = "Authentication service not available";
            return false;
        }

        try
        {
            LogDiagnostic("Refreshing session");
            var result = await _authFDW.RefreshSessionAsync(this.GetCancellationTokenOnDestroy());
            LogDiagnostic($"Session refresh result: {result}");
            return result;
        }
        catch (Exception ex)
        {
            LogDiagnosticError($"Session refresh failed: {ex.Message}");
            JsLastError = ex.Message;
            return false;
        }
    }

    /// <summary>
    /// Manually refresh the authentication state from the current session
    /// </summary>
    public void JsRefreshAuthState()
    {
        try
        {
            LogDiagnostic("Manually refreshing auth state");

            // Check the current session
            var hasSession = _supabaseInstance?.CurrentSession?.Value != null;
            var hasUser = _supabaseInstance?.CurrentUser?.Value != null;

            // Update authentication state
            JsIsAuthenticated = hasSession && hasUser;

            // Update user information
            if (hasUser)
            {
                var user = _supabaseInstance.CurrentUser.Value;
                JsCurrentUserEmail = user.Email ?? string.Empty;
                JsCurrentUserId = user.Id ?? string.Empty;
                JsCurrentUserRole = user.UserMetadata?.TryGetValue("role", out var role) == true ? role.ToString() : string.Empty;
            }

            // Also sync with AuthFDW if available
            if (_authFDW != null)
            {
                JsIsAuthenticated = _authFDW.IsAuthenticated.Value;
            }

            LogDiagnostic($"Auth state refreshed - Authenticated: {JsIsAuthenticated}, User: {JsCurrentUserEmail}");
        }
        catch (Exception ex)
        {
            LogDiagnosticError($"Failed to refresh auth state: {ex.Message}");
        }
    }

    /// <summary>
    /// Sign in with OAuth provider
    /// </summary>
    public async UniTask<bool> JsSignInWithOAuthAsync(string provider)
    {
        if (_authFDW == null)
        {
            LogDiagnosticError("Auth FDW not available");
            JsLastError = "Authentication service not available";
            return false;
        }

        try
        {
            LogDiagnostic($"Signing in with OAuth: {provider}");

            // Parse provider string to enum
            if (!Enum.TryParse<Supabase.Gotrue.Constants.Provider>(provider, true, out var providerEnum))
            {
                JsLastError = $"Invalid OAuth provider: {provider}";
                return false;
            }

            var result = await _authFDW.SignInWithOAuthAsync(providerEnum, this.GetCancellationTokenOnDestroy());
            LogDiagnostic($"OAuth sign in result: {result}");
            if (result) JsRefreshAuthState();
            return result;
        }
        catch (Exception ex)
        {
            LogDiagnosticError($"OAuth sign in failed: {ex.Message}");
            JsLastError = ex.Message;
            return false;
        }
    }

    /// <summary>
    /// Sign in with GitHub OAuth
    /// </summary>
    public async UniTask<bool> JsSignInWithGithubAsync()
    {
        if (_authFDW == null)
        {
            LogDiagnosticError("Auth FDW not available");
            JsLastError = "Authentication service not available";
            return false;
        }

        try
        {
            LogDiagnostic("Signing in with GitHub");
            var result = await _authFDW.SignInWithGithubAsync(this.GetCancellationTokenOnDestroy());
            LogDiagnostic($"GitHub sign in result: {result}");
            if (result) JsRefreshAuthState();
            return result;
        }
        catch (Exception ex)
        {
            LogDiagnosticError($"GitHub sign in failed: {ex.Message}");
            JsLastError = ex.Message;
            return false;
        }
    }

    /// <summary>
    /// Sign in with Discord OAuth
    /// </summary>
    public async UniTask<bool> JsSignInWithDiscordAsync()
    {
        if (_authFDW == null)
        {
            LogDiagnosticError("Auth FDW not available");
            JsLastError = "Authentication service not available";
            return false;
        }

        try
        {
            LogDiagnostic("Signing in with Discord");
            var result = await _authFDW.SignInWithDiscordAsync(this.GetCancellationTokenOnDestroy());
            LogDiagnostic($"Discord sign in result: {result}");
            if (result) JsRefreshAuthState();
            return result;
        }
        catch (Exception ex)
        {
            LogDiagnosticError($"Discord sign in failed: {ex.Message}");
            JsLastError = ex.Message;
            return false;
        }
    }

    /// <summary>
    /// Sign in with Twitch OAuth
    /// </summary>
    public async UniTask<bool> JsSignInWithTwitchAsync()
    {
        if (_authFDW == null)
        {
            LogDiagnosticError("Auth FDW not available");
            JsLastError = "Authentication service not available";
            return false;
        }

        try
        {
            LogDiagnostic("Signing in with Twitch");
            var result = await _authFDW.SignInWithTwitchAsync(this.GetCancellationTokenOnDestroy());
            LogDiagnostic($"Twitch sign in result: {result}");
            if (result) JsRefreshAuthState();
            return result;
        }
        catch (Exception ex)
        {
            LogDiagnosticError($"Twitch sign in failed: {ex.Message}");
            JsLastError = ex.Message;
            return false;
        }
    }

    /// <summary>
    /// Check if user is authenticated
    /// </summary>
    public bool JsIsUserAuthenticated()
    {
        return JsIsAuthenticated;
    }

    /// <summary>
    /// Get current user email
    /// </summary>
    public string JsGetCurrentUserEmail()
    {
        return JsCurrentUserEmail;
    }

    /// <summary>
    /// Get current user ID
    /// </summary>
    public string JsGetCurrentUserId()
    {
        return JsCurrentUserId;
    }

    /// <summary>
    /// Get current user role
    /// </summary>
    public string JsGetCurrentUserRole()
    {
        return JsCurrentUserRole;
    }

    #endregion

    #region OneJS Public Methods - Realtime

    /// <summary>
    /// Create a broadcast channel for real-time communication
    /// </summary>
    public async UniTask<bool> JsCreateBroadcastChannelAsync(string channelName)
    {
        if (_realtimeFDW == null)
        {
            LogDiagnosticError("Realtime FDW not available");
            JsLastError = "Realtime service not available";
            return false;
        }

        try
        {
            LogDiagnostic($"Creating broadcast channel: {channelName}");

            // Create a generic broadcast channel
            var broadcast = await _realtimeFDW.CreateBroadcastAsync<BaseBroadcast>(
                channelName,
                payload => {
                    LogDiagnostic($"Received broadcast on {channelName}: {payload}");
                },
                this.GetCancellationTokenOnDestroy()
            );

            var success = broadcast != null;
            LogDiagnostic($"Broadcast channel creation result: {success}");

            if (success)
            {
                UpdateActiveChannelsInfo();
            }

            return success;
        }
        catch (Exception ex)
        {
            LogDiagnosticError($"Failed to create broadcast channel: {ex.Message}");
            JsLastError = ex.Message;
            return false;
        }
    }

    /// <summary>
    /// Subscribe to a database channel for real-time updates
    /// </summary>
    public async UniTask<bool> JsSubscribeToDatabaseChannelAsync(string channelName, string schema, string table, string column = null, string value = null)
    {
        if (_realtimeFDW == null)
        {
            LogDiagnosticError("Realtime FDW not available");
            JsLastError = "Realtime service not available";
            return false;
        }

        try
        {
            LogDiagnostic($"Subscribing to database channel: {channelName}, table: {schema}.{table}");

            var channel = await _realtimeFDW.SubscribeToDatabaseChannelAsync(
                channelName, schema, table, column, value, this.GetCancellationTokenOnDestroy()
            );

            var success = channel != null;
            LogDiagnostic($"Database channel subscription result: {success}");

            if (success)
            {
                UpdateActiveChannelsInfo();
            }

            return success;
        }
        catch (Exception ex)
        {
            LogDiagnosticError($"Failed to subscribe to database channel: {ex.Message}");
            JsLastError = ex.Message;
            return false;
        }
    }

    /// <summary>
    /// Unsubscribe from a channel
    /// </summary>
    public async UniTask<bool> JsUnsubscribeFromChannelAsync(string channelName)
    {
        if (_realtimeFDW == null)
        {
            LogDiagnosticError("Realtime FDW not available");
            JsLastError = "Realtime service not available";
            return false;
        }

        try
        {
            LogDiagnostic($"Unsubscribing from channel: {channelName}");

            var result = await _realtimeFDW.UnsubscribeFromChannelAsync(channelName, this.GetCancellationTokenOnDestroy());
            LogDiagnostic($"Unsubscribe result: {result}");

            if (result)
            {
                UpdateActiveChannelsInfo();
            }

            return result;
        }
        catch (Exception ex)
        {
            LogDiagnosticError($"Failed to unsubscribe from channel: {ex.Message}");
            JsLastError = ex.Message;
            return false;
        }
    }

    /// <summary>
    /// Disconnect from realtime
    /// </summary>
    public async UniTask<bool> JsDisconnectRealtimeAsync()
    {
        if (_realtimeFDW == null)
        {
            LogDiagnosticError("Realtime FDW not available");
            JsLastError = "Realtime service not available";
            return false;
        }

        try
        {
            LogDiagnostic("Disconnecting from realtime");
            await _realtimeFDW.DisconnectAsync(this.GetCancellationTokenOnDestroy());
            UpdateActiveChannelsInfo();
            return true;
        }
        catch (Exception ex)
        {
            LogDiagnosticError($"Failed to disconnect from realtime: {ex.Message}");
            JsLastError = ex.Message;
            return false;
        }
    }

    /// <summary>
    /// Get list of active channels
    /// </summary>
    public string[] JsGetActiveChannels()
    {
        return JsActiveChannels.ToArray();
    }

    /// <summary>
    /// Get number of active channels
    /// </summary>
    public int JsGetActiveChannelCount()
    {
        return JsActiveChannelCount;
    }

    #endregion

    #region OneJS Public Methods - UI/UX

    /// <summary>
    /// Toggle between login and register form
    /// </summary>
    public void JsToggleFormMode()
    {
        if (_uiux != null)
        {
            _uiux.ToggleFormMode();
            LogDiagnostic($"Form mode toggled to: {(JsShowLoginForm ? "Login" : "Register")}");
        }
        else
        {
            LogDiagnosticWarning("UIUX service not available");
        }
    }

    /// <summary>
    /// Handle login with current form values
    /// </summary>
    public async UniTask<bool> JsHandleLoginAsync()
    {
        if (_uiux == null)
        {
            LogDiagnosticError("UIUX service not available");
            JsLastError = "UI service not available";
            return false;
        }

        try
        {
            LogDiagnostic("Handling login via UIUX");
            await _uiux.HandleLoginAsync(this.GetCancellationTokenOnDestroy());
            return JsIsAuthenticated;
        }
        catch (Exception ex)
        {
            LogDiagnosticError($"Login handling failed: {ex.Message}");
            JsLastError = ex.Message;
            return false;
        }
    }

    /// <summary>
    /// Handle registration with current form values
    /// </summary>
    public async UniTask<bool> JsHandleRegisterAsync()
    {
        if (_uiux == null)
        {
            LogDiagnosticError("UIUX service not available");
            JsLastError = "UI service not available";
            return false;
        }

        try
        {
            LogDiagnostic("Handling registration via UIUX");
            await _uiux.HandleRegisterAsync(this.GetCancellationTokenOnDestroy());
            return JsIsAuthenticated;
        }
        catch (Exception ex)
        {
            LogDiagnosticError($"Registration handling failed: {ex.Message}");
            JsLastError = ex.Message;
            return false;
        }
    }

    /// <summary>
    /// Handle logout via UIUX
    /// </summary>
    public async UniTask<bool> JsHandleLogoutAsync()
    {
        if (_uiux == null)
        {
            LogDiagnosticError("UIUX service not available");
            JsLastError = "UI service not available";
            return false;
        }

        try
        {
            LogDiagnostic("Handling logout via UIUX");
            await _uiux.HandleLogoutAsync(this.GetCancellationTokenOnDestroy());
            return !JsIsAuthenticated;
        }
        catch (Exception ex)
        {
            LogDiagnosticError($"Logout handling failed: {ex.Message}");
            JsLastError = ex.Message;
            return false;
        }
    }

    /// <summary>
    /// Handle OAuth login via UIUX
    /// </summary>
    public async UniTask<bool> JsHandleOAuthLoginAsync(string provider)
    {
        if (_uiux == null)
        {
            LogDiagnosticError("UIUX service not available");
            JsLastError = "UI service not available";
            return false;
        }

        try
        {
            LogDiagnostic($"Handling OAuth login via UIUX: {provider}");

            // Parse provider string to enum
            if (!Enum.TryParse<Supabase.Gotrue.Constants.Provider>(provider, true, out var providerEnum))
            {
                JsLastError = $"Invalid OAuth provider: {provider}";
                return false;
            }

            await _uiux.HandleOAuthLoginAsync(providerEnum, this.GetCancellationTokenOnDestroy());
            return JsIsAuthenticated;
        }
        catch (Exception ex)
        {
            LogDiagnosticError($"OAuth login handling failed: {ex.Message}");
            JsLastError = ex.Message;
            return false;
        }
    }

    /// <summary>
    /// Set email input value
    /// </summary>
    public void JsSetEmailInput(string email)
    {
        if (_uiux != null)
        {
            _uiux.EmailInput.Value = email;
        }
    }

    /// <summary>
    /// Set password input value
    /// </summary>
    public void JsSetPasswordInput(string password)
    {
        if (_uiux != null)
        {
            _uiux.PasswordInput.Value = password;
        }
    }

    #endregion

    #region OneJS Public Methods - Utility

    /// <summary>
    /// Get connection status string
    /// </summary>
    public string JsGetConnectionStatus()
    {
        return JsConnectionStatus;
    }

    /// <summary>
    /// Get a formatted summary of the current Supabase state
    /// </summary>
    public string JsGetSupabaseSummary()
    {
        if (!JsIsInitialized)
            return "Supabase not initialized";

        if (!JsIsOnline)
            return "Supabase offline";

        if (JsIsAuthenticated)
            return $"Authenticated as {JsCurrentUserEmail} | Realtime: {(JsIsRealtimeConnected ? "Connected" : "Disconnected")}";

        return $"Anonymous user | Realtime: {(JsIsRealtimeConnected ? "Connected" : "Disconnected")}";
    }

    /// <summary>
    /// Check if services are available
    /// </summary>
    public bool JsAreServicesAvailable()
    {
        return _supabaseInstance != null && _authFDW != null;
    }

    /// <summary>
    /// Get the last error message
    /// </summary>
    public string JsGetLastError()
    {
        return JsLastError;
    }

    /// <summary>
    /// Clear the last error
    /// </summary>
    public void JsClearLastError()
    {
        JsLastError = string.Empty;
        JsAuthError = string.Empty;
        JsRealtimeError = string.Empty;
    }

    /// <summary>
    /// Get broadcasting status and info
    /// </summary>
    public string JsGetBroadcastingInfo()
    {
        if (!JsIsBroadcasting)
            return "Not broadcasting";

        return $"Broadcasting on '{JsBroadcastChannelName}' | Session: {JsSessionId}";
    }

    /// <summary>
    /// Get realtime connection info
    /// </summary>
    public string JsGetRealtimeInfo()
    {
        return $"State: {JsRealtimeConnectionState} | Channels: {JsActiveChannelCount}";
    }

    #endregion
}

#endif