#if !UNITY_WEBGL && !UNITY_IOS && !UNITY_ANDROID

using System;
using UnityEngine;
using OneJS;
using R3;

namespace KBVE.SSDB.Steam
{
    /// <summary>
    /// OneJS integration partial class for SteamUserProfiles
    /// Provides EventfulProperty fields for bidirectional binding with JavaScript
    /// </summary>
    public partial class SteamUserProfiles
    {
        #region OneJS EventfulProperty Fields
        
        // EventfulProperty fields for OneJS bidirectional binding
        [EventfulProperty(checkEquality: true)]
        private string _jsUserName = string.Empty;
        
        [EventfulProperty(checkEquality: true)]
        private string _jsUserStatus = "Offline";
        
        [EventfulProperty(checkEquality: true)]
        private string _jsUserSteamId = string.Empty;
        
        [EventfulProperty(checkEquality: true)]
        private bool _jsIsOnline = false;
        
        [EventfulProperty(checkEquality: true)]
        private bool _jsIsInGame = false;
        
        [EventfulProperty(checkEquality: true)]
        private int _jsUserLevel = 0;
        
        [EventfulProperty(checkEquality: true)]
        private string _jsCurrentGameName = string.Empty;
        
        [EventfulProperty(checkEquality: true)]
        private int _jsFriendCount = 0;
        
        [EventfulProperty]
        private Texture2D _jsUserAvatar = null;
        
        #endregion

        #region OneJS Events
        
        // Events that will be generated by EventfulProperty attribute
        public event Action<string> jsUserNameChanged;
        public event Action<string> jsUserStatusChanged;
        public event Action<string> jsUserSteamIdChanged;
        public event Action<bool> jsIsOnlineChanged;
        public event Action<bool> jsIsInGameChanged;
        public event Action<int> jsUserLevelChanged;
        public event Action<string> jsCurrentGameNameChanged;
        public event Action<int> jsFriendCountChanged;
        public event Action<Texture2D> jsUserAvatarChanged;
        
        #endregion

        #region OneJS Properties
        
        // Public properties for JS access (generated by EventfulProperty)
        public string jsUserName
        {
            get => _jsUserName;
            set
            {
                if (_jsUserName != value)
                {
                    _jsUserName = value;
                    jsUserNameChanged?.Invoke(value);
                }
            }
        }
        
        public string jsUserStatus
        {
            get => _jsUserStatus;
            set
            {
                if (_jsUserStatus != value)
                {
                    _jsUserStatus = value;
                    jsUserStatusChanged?.Invoke(value);
                }
            }
        }
        
        public string jsUserSteamId
        {
            get => _jsUserSteamId;
            set
            {
                if (_jsUserSteamId != value)
                {
                    _jsUserSteamId = value;
                    jsUserSteamIdChanged?.Invoke(value);
                }
            }
        }
        
        public bool jsIsOnline
        {
            get => _jsIsOnline;
            set
            {
                if (_jsIsOnline != value)
                {
                    _jsIsOnline = value;
                    jsIsOnlineChanged?.Invoke(value);
                }
            }
        }
        
        public bool jsIsInGame
        {
            get => _jsIsInGame;
            set
            {
                if (_jsIsInGame != value)
                {
                    _jsIsInGame = value;
                    jsIsInGameChanged?.Invoke(value);
                }
            }
        }
        
        public int jsUserLevel
        {
            get => _jsUserLevel;
            set
            {
                if (_jsUserLevel != value)
                {
                    _jsUserLevel = value;
                    jsUserLevelChanged?.Invoke(value);
                }
            }
        }
        
        public string jsCurrentGameName
        {
            get => _jsCurrentGameName;
            set
            {
                if (_jsCurrentGameName != value)
                {
                    _jsCurrentGameName = value;
                    jsCurrentGameNameChanged?.Invoke(value);
                }
            }
        }
        
        public int jsFriendCount
        {
            get => _jsFriendCount;
            set
            {
                if (_jsFriendCount != value)
                {
                    _jsFriendCount = value;
                    jsFriendCountChanged?.Invoke(value);
                }
            }
        }
        
        public Texture2D jsUserAvatar
        {
            get => _jsUserAvatar;
            set
            {
                _jsUserAvatar = value;
                jsUserAvatarChanged?.Invoke(value);
            }
        }
        
        #endregion

        #region OneJS Binding Methods
        
        /// <summary>
        /// Initialize bindings between reactive properties and JS properties
        /// </summary>
        private void InitializeOneJSBindings()
        {
            // Bind reactive properties to JS properties
            UserName.Subscribe(value => 
            {
                if (_jsUserName != value)
                {
                    _jsUserName = value;
                    jsUserNameChanged?.Invoke(value);
                }
            }).AddTo(_disposables);
            
            UserStatus.Subscribe(value => 
            {
                if (_jsUserStatus != value)
                {
                    _jsUserStatus = value;
                    jsUserStatusChanged?.Invoke(value);
                }
            }).AddTo(_disposables);
            
            UserSteamId.Subscribe(value => 
            {
                if (_jsUserSteamId != value)
                {
                    _jsUserSteamId = value;
                    jsUserSteamIdChanged?.Invoke(value);
                }
            }).AddTo(_disposables);
            
            IsOnline.Subscribe(value => 
            {
                if (_jsIsOnline != value)
                {
                    _jsIsOnline = value;
                    jsIsOnlineChanged?.Invoke(value);
                }
            }).AddTo(_disposables);
            
            IsInGame.Subscribe(value => 
            {
                if (_jsIsInGame != value)
                {
                    _jsIsInGame = value;
                    jsIsInGameChanged?.Invoke(value);
                }
            }).AddTo(_disposables);
            
            UserLevel.Subscribe(value => 
            {
                if (_jsUserLevel != value)
                {
                    _jsUserLevel = value;
                    jsUserLevelChanged?.Invoke(value);
                }
            }).AddTo(_disposables);
            
            CurrentGameName.Subscribe(value => 
            {
                if (_jsCurrentGameName != value)
                {
                    _jsCurrentGameName = value;
                    jsCurrentGameNameChanged?.Invoke(value);
                }
            }).AddTo(_disposables);
            
            FriendCount.Subscribe(value => 
            {
                if (_jsFriendCount != value)
                {
                    _jsFriendCount = value;
                    jsFriendCountChanged?.Invoke(value);
                }
            }).AddTo(_disposables);
            
            UserAvatar.Subscribe(value => 
            {
                _jsUserAvatar = value;
                jsUserAvatarChanged?.Invoke(value);
            }).AddTo(_disposables);
        }
        
        #endregion

        #region OneJS Public Methods
        
        /// <summary>
        /// Force refresh all user data from Steam
        /// </summary>
        public void JsRefreshAllData()
        {
            RefreshUserData();
            RefreshAvatar();
        }
        
        /// <summary>
        /// Get a formatted string of user info for display
        /// </summary>
        public string JsGetUserSummary()
        {
            return $"{UserName.Value} (Level {UserLevel.Value}) - {UserStatus.Value}";
        }
        
        /// <summary>
        /// Check if user has a specific achievement
        /// </summary>
        public bool JsHasAchievement(string achievementId)
        {
            // This would need to be implemented with achievement checking
            // For now, return false as placeholder
            Debug.Log($"[SteamUserProfiles] Checking achievement: {achievementId}");
            return false;
        }
        
        /// <summary>
        /// Get user's play time for current game in hours
        /// </summary>
        public float JsGetCurrentGamePlayTime()
        {
            // This would need Steam API integration for playtime
            // Return 0 as placeholder
            return 0f;
        }
        
        /// <summary>
        /// Get user's friend list count
        /// </summary>
        public int JsGetFriendCount()
        {
            return FriendCount.Value;
        }
        
        /// <summary>
        /// Check if user is playing a specific game by ID
        /// </summary>
        public bool JsIsPlayingGame(ulong gameId)
        {
            return IsInGame.Value && CurrentGameId.Value == gameId;
        }
        
        #endregion
    }
}

#endif