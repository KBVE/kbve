---
export interface Props {
  src?: string;
  id?: string;
  autoplay?: boolean;
  loop?: boolean;
}

const {
  src = 'https://kbve.com/assets/lottie/holydance.lottie',
  id = 'discord-canvas',
  autoplay = true,
  loop = true,
} = Astro.props;
---

<entity-lottie
  data-src={src}
  data-id={id}
  data-autoplay={autoplay}
  data-loop={loop}
>
  <canvas id={id} class="w-full h-full" data-lottie-init="false"></canvas>

  <script type="module" is:inline data-astro-rerun>
    document.addEventListener('DOMContentLoaded', () => {
      if (!customElements.get('entity-lottie')) {
        class EntityLottieElement extends HTMLElement {
          static get observedAttributes() {
            return ['data-src', 'data-id', 'data-autoplay', 'data-loop'];
          }

          constructor() {
            super();
            this.worker = null;
          }

          connectedCallback() {
            this.initLottie();
          }

          attributeChangedCallback(name, oldVal, newVal) {
            if (oldVal !== newVal) {
              this.initLottie();
            }
          }

          async initLottie() {
            const id = this.dataset.id;
            const src = this.dataset.src;
            const autoplay = this.dataset.autoplay === 'true';
            const loop = this.dataset.loop === 'true';

            const canvas = document.getElementById(id);
            if (!canvas || canvas.dataset.lottieInit === 'true') return;

            canvas.dataset.lottieInit = 'true';

            const { DotLottieWorker } = await import('https://cdn.jsdelivr.net/npm/@lottiefiles/dotlottie-web@0.44.0/+esm');

            this.worker = new DotLottieWorker({
              canvas,
              src,
              autoplay,
              loop,
            });
          }
        }

        customElements.define('entity-lottie', EntityLottieElement);
      }
    });
  </script>
</entity-lottie>
