---
import { ClientCardGrid } from './ReactLandingCard';

export interface Props {
  url: string;
  collectionKey?: string;
  filter?: (entry: any) => boolean;
  limit?: number;
  sortBy?: 'title' | 'date' | 'slug';
  sortOrder?: 'asc' | 'desc';
  virtualized?: boolean;
  containerHeight?: string;
  minCardWidth?: number;
  cardHeight?: number;
  skeletonCount?: number;
}

const {
  url,
  collectionKey = 'applications', // Default key to look for in the JSON response
  filter,
  limit,
  sortBy = 'title',
  sortOrder = 'asc',
  virtualized = false,
  containerHeight = virtualized ? '600px' : 'auto',
  minCardWidth = 300,
  cardHeight = 400,
  skeletonCount = 12
} = Astro.props;

// Calculate grid dimensions for skeleton
const calculateSkeletonLayout = (minWidth: number, gap: number = 16) => {
  // Assume a standard container width for SSR skeleton
  const assumedWidth = 1200;
  const effectiveWidth = assumedWidth - gap;
  const columnsPerRow = Math.max(1, Math.floor(effectiveWidth / (minWidth + gap)));
  return { columnsPerRow };
};

const { columnsPerRow } = calculateSkeletonLayout(minCardWidth);
---

<!-- Static skeleton that appears immediately on page load -->
<div id="card-grid-container" style={`min-height: ${containerHeight}; position: relative;`}>
  <!-- Static HTML Skeleton -->
  <div
    id="static-skeleton"
    class="grid gap-4 p-4 transition-opacity duration-500"
    style={`grid-template-columns: repeat(${Math.min(columnsPerRow, 3)}, 1fr);`}
  >
    {Array.from({ length: skeletonCount }, (_, i) => (
      <div
        class="rounded-lg overflow-hidden animate-pulse"
        style={`
          background: linear-gradient(135deg, var(--sl-color-accent-low) 0%, var(--sl-color-gray-6) 100%);
          border: 1px solid var(--sl-color-gray-5);
          height: ${cardHeight}px;
          display: flex;
          flex-direction: column;
          position: relative;
        `}
      >
        <!-- Icon skeletons positioned above image -->
        <div style="
          position: absolute;
          top: 0.5rem;
          right: 0.5rem;
          display: grid;
          grid-template-columns: repeat(4, 2.5rem);
          gap: 0.5rem;
          z-index: 10;
          align-items: start;
          justify-items: center;
        ">
          {[1, 2, 3, 4].map(() => (
            <div style={`
              width: 2.5rem;
              height: 2.5rem;
              min-width: 2.5rem;
              min-height: 2.5rem;
              max-width: 2.5rem;
              max-height: 2.5rem;
              background-color: rgba(0, 0, 0, 0.3);
              border-radius: 50%;
              opacity: 0.5;
              box-sizing: border-box;
              grid-column: auto;
              grid-row: auto;
              margin: 0;
              padding: 0;
            `}></div>
          ))}
        </div>

        <!-- Image skeleton -->
        <div style={`
          width: 100%;
          height: 200px;
          background-color: var(--sl-color-gray-5);
          opacity: 0.7;
          position: relative;
        `}>
          <!-- Title skeleton positioned over bottom of image -->
          <div style="
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            z-index: 11;
          ">
            <div style={`
              height: 1.5rem;
              background-color: rgba(255, 255, 255, 0.3);
              border-radius: 0;
              width: 80%;
              opacity: 0.8;
              margin: 0;
              padding: 0.75rem;
              background: linear-gradient(to top, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.4), transparent);
            `}></div>
          </div>
        </div>

        <!-- Content skeleton -->
        <div style="padding: 1rem; flex: 1; display: flex; flex-direction: column;">
          <!-- Description skeleton -->
          <div style="flex: 1; margin-bottom: 1rem;">
            <div style={`
              height: 1rem;
              background-color: var(--sl-color-gray-5);
              border-radius: 0.25rem;
              margin-bottom: 0.5rem;
              width: 100%;
              opacity: 0.6;
            `}></div>
            <div style={`
              height: 1rem;
              background-color: var(--sl-color-gray-5);
              border-radius: 0.25rem;
              margin-bottom: 0.5rem;
              width: 85%;
              opacity: 0.6;
            `}></div>
            <div style={`
              height: 1rem;
              background-color: var(--sl-color-gray-5);
              border-radius: 0.25rem;
              width: 60%;
              opacity: 0.6;
            `}></div>
          </div>

        </div>
      </div>
    ))}
  </div>

  <!-- Client-side React component that will fade in -->
  <ClientCardGrid
    url={url}
    collectionKey={collectionKey}
    virtualized={virtualized}
    containerHeight={containerHeight}
    minCardWidth={minCardWidth}
    cardHeight={cardHeight}
    skeletonCount={skeletonCount}
    filter={filter}
    limit={limit}
    sortBy={sortBy}
    sortOrder={sortOrder}
    client:only="react"
  />
</div>
