---
import { ClientCardGrid } from './ReactLandingCard';

export interface Props {
  url: string;
  collectionKey?: string;
  filter?: (entry: any) => boolean;
  limit?: number;
  sortBy?: 'title' | 'date' | 'slug';
  sortOrder?: 'asc' | 'desc';
  virtualized?: boolean;
  containerHeight?: string;
  minCardWidth?: number;
  cardHeight?: number;
  skeletonCount?: number;
}

const {
  url,
  collectionKey = 'applications',
  filter,
  limit,
  sortBy = 'title',
  sortOrder = 'asc',
  virtualized = false,
  containerHeight = virtualized ? '600px' : 'auto',
  minCardWidth = 300,
  cardHeight = 400,
  skeletonCount = 12
} = Astro.props;

const calculateSkeletonLayout = (minWidth: number, gap: number = 16) => {
  const assumedWidth = 1200;
  const effectiveWidth = assumedWidth - gap;
  const columnsPerRow = Math.max(1, Math.floor(effectiveWidth / (minWidth + gap)));
  return { columnsPerRow };
};

const { columnsPerRow } = calculateSkeletonLayout(minCardWidth);
---

<div id="card-grid-container" class="relative" style={`min-height: ${containerHeight};`}>
  <div
    id="static-skeleton"
    class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 p-4 transition-opacity duration-500 items-start"
  >
    {Array.from({ length: skeletonCount }, (_, i) => (
      <div
        class="rounded-lg overflow-hidden animate-pulse flex flex-col relative"
        style={`
          background: linear-gradient(135deg, var(--sl-color-accent-low) 0%, var(--sl-color-gray-6) 100%);
          border: 1px solid var(--sl-color-gray-5);
          height: ${cardHeight}px;
        `}
      >
        <div class="w-full opacity-70 relative" style={`background-color: var(--sl-color-gray-5); height: ${Math.floor(cardHeight * 0.5)}px;`}>
          <div class="absolute top-2 right-2 grid gap-2 z-10 items-start justify-items-center" style="grid-template-columns: repeat(4, 2.5rem);">
            {[1, 2, 3, 4].map(() => (
              <div class="w-10 h-10 bg-black/30 rounded-full opacity-50"></div>
            ))}
          </div>
          <div class="absolute bottom-0 left-0 right-0 z-10">
            <div class="h-6 w-4/5 opacity-80 m-0 p-3 bg-gradient-to-t from-black/80 via-black/40 to-transparent"></div>
          </div>
        </div>

        <div class="p-4 sm:p-5 lg:p-6 flex-1 flex flex-col">
          <div class="flex-1 mb-4 sm:mb-5 lg:mb-6">
            <div class="h-3 sm:h-4 rounded mb-2 w-full opacity-60" style="background-color: var(--sl-color-gray-5);"></div>
            <div class="h-3 sm:h-4 rounded mb-2 w-4/5 opacity-60" style="background-color: var(--sl-color-gray-5);"></div>
            <div class="h-3 sm:h-4 rounded w-3/5 opacity-60" style="background-color: var(--sl-color-gray-5);"></div>
          </div>

        </div>
      </div>
    ))}
  </div>

  <ClientCardGrid
    url={url}
    collectionKey={collectionKey}
    virtualized={virtualized}
    containerHeight={containerHeight}
    minCardWidth={minCardWidth}
    cardHeight={cardHeight}
    skeletonCount={skeletonCount}
    filter={filter}
    limit={limit}
    sortBy={sortBy}
    sortOrder={sortOrder}
    client:only="react"
  />
</div>
