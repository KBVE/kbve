---
import type { HolyCardProps } from './ServiceHolyCard';
import { ReactHolyCard } from './ReactHolyCard';

export interface Props extends HolyCardProps {
  id?: string;
  className?: string;
}

const {
  backgroundImage,
  title,
  description,
  buttonName,
  link,
  icons,
  id,
  className = ''
} = Astro.props;

// Generate unique ID if not provided
const uniqueId = id || `holy-card-${Math.random().toString(36).substr(2, 9)}`;

const cardProps: HolyCardProps = {
  backgroundImage,
  title,
  description,
  buttonName,
  link,
  icons
};
---

<style>
	@keyframes shimmer {
		0% {
			background-position: -200% 0;
		}
		100% {
			background-position: 200% 0;
		}
	}

	/* Custom properties for theming */
	[data-neoglass-panel] {
		--panel-bg: color-mix(in srgb, var(--sl-color-white) 5%, transparent);
		--panel-border: color-mix(
			in srgb,
			var(--sl-color-white) 10%,
			transparent
		);
		--panel-hover-bg: color-mix(
			in srgb,
			var(--sl-color-white) 8%,
			transparent
		);
		--panel-hover-ring: color-mix(
			in srgb,
			var(--sl-color-accent) 30%,
			transparent
		);
		--glow-border: color-mix(
			in srgb,
			var(--sl-color-accent) 10%,
			transparent
		);
		--glow-hover-border: color-mix(
			in srgb,
			var(--sl-color-accent) 30%,
			transparent
		);
		--drop-shadow-color: color-mix(
			in srgb,
			var(--sl-color-accent) 60%,
			transparent
		);
	}

	/* Dark theme adjustments */
	[data-theme='dark'] [data-neoglass-panel] {
		--drop-shadow-color: color-mix(
			in srgb,
			var(--sl-color-accent) 80%,
			rgba(255, 255, 255, 0.1)
		);
	}

	[data-neoglass-panel]:hover {
		background-color: var(--panel-hover-bg);
		border-color: var(--panel-hover-ring);
	}

	[data-neoglass-panel]:hover [data-neoglass-glow] {
		border-color: var(--glow-hover-border);
	}

	.holy-card {
		position: relative;
		width: 100%;
		max-width: 400px;
		aspect-ratio: 16/9;
		border-radius: 1rem;
		overflow: visible;
		transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
		border: 1px solid var(--panel-border);
		background-color: #1a1a1a;
	}

	.holy-card-background {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		width: 100%;
		height: 100%;
		background-size: cover;
		background-position: center;
		background-repeat: no-repeat;
		transition: transform 0.3s ease;
		border-radius: 1rem;
		z-index: 1;
		margin: 0;
		padding: 0;
		opacity: 0;
		transition: opacity 0.3s ease, transform 0.3s ease;
		overflow: hidden;
	}

	.holy-card-background.loaded {
		opacity: 1;
	}

	.holy-card-background.loading {
		background: linear-gradient(
			45deg,
			#f0f0f0 25%,
			transparent 25%,
			transparent 75%,
			#f0f0f0 75%,
			#f0f0f0
		),
		linear-gradient(
			45deg,
			#f0f0f0 25%,
			transparent 25%,
			transparent 75%,
			#f0f0f0 75%,
			#f0f0f0
		);
		background-size: 20px 20px;
		background-position: 0 0, 10px 10px;
		animation: shimmer 2s linear infinite;
	}

	.holy-card-overlay {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		width: 100%;
		height: 100%;
		background: linear-gradient(
			135deg,
			rgba(0, 0, 0, 0.2) 0%,
			rgba(0, 0, 0, 0.4) 50%,
			rgba(0, 0, 0, 0.7) 100%
		);
		border-radius: 1rem;
		z-index: 2;
		margin: 0;
		padding: 0;
		overflow: hidden;
	}

	.holy-card-content {
		position: relative;
		z-index: 3;
		height: 100%;
		display: flex;
		flex-direction: column;
		justify-content: flex-end;
		padding: 1.5rem;
		color: white;
	}

	.holy-card-title {
		font-size: 1.5rem;
		font-weight: 700;
		margin-bottom: 0.5rem;
		line-height: 1.2;
		text-shadow:
			0 2px 4px rgba(0, 0, 0, 0.8),
			0 1px 2px rgba(0, 0, 0, 0.9),
			1px 1px 0 rgba(0, 0, 0, 0.8),
			-1px -1px 0 rgba(0, 0, 0, 0.8),
			1px -1px 0 rgba(0, 0, 0, 0.8),
			-1px 1px 0 rgba(0, 0, 0, 0.8);
	}

	.holy-card-description {
		font-size: 0.875rem;
		line-height: 1.4;
		margin-bottom: 1rem;
		opacity: 0.95;
		text-shadow:
			0 2px 4px rgba(0, 0, 0, 0.8),
			0 1px 2px rgba(0, 0, 0, 0.9),
			1px 1px 0 rgba(0, 0, 0, 0.7),
			-1px -1px 0 rgba(0, 0, 0, 0.7),
			1px -1px 0 rgba(0, 0, 0, 0.7),
			-1px 1px 0 rgba(0, 0, 0, 0.7);
	}

	.holy-card-button {
		align-self: flex-start;
		background: var(--sl-color-accent);
		color: white;
		padding: 0.5rem 1rem;
		border-radius: 0.5rem;
		border: none;
		font-weight: 600;
		font-size: 0.875rem;
		transition: all 0.2s ease;
		text-decoration: none;
		display: inline-block;
		box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
	}

	.holy-card-button:hover {
		background: color-mix(in srgb, var(--sl-color-accent) 90%, white);
		transform: translateY(-1px);
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
	}

	.holy-card:hover .holy-card-background {
		transform: scale(1.05);
	}

	.holy-card-glow {
		position: absolute;
		top: -2px;
		left: -2px;
		right: -2px;
		bottom: -2px;
		background: linear-gradient(45deg, var(--glow-border), transparent, var(--glow-border));
		border-radius: calc(1rem + 2px);
		opacity: 0;
		transition: opacity 0.3s ease;
		z-index: 0;
	}

	.holy-card:hover .holy-card-glow {
		opacity: 1;
	}

	/* Holy Card Icons */
	.holy-card-icons {
		position: absolute;
		top: 12px;
		right: 12px;
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: flex-end;
		gap: 8px;
		z-index: 10;
		opacity: 0;
		transform: translateY(-8px);
		transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
		pointer-events: none;
	}

	.holy-card:hover .holy-card-icons {
		opacity: 1;
		transform: translateY(0);
		pointer-events: auto;
	}

	.holy-card-icon-btn {
		background: rgba(0, 0, 0, 0.8);
		border: none;
		border-radius: 50%;
		width: 36px;
		height: 36px;
		min-width: 36px;
		min-height: 36px;
		display: flex;
		align-items: center;
		justify-content: center;
		cursor: pointer;
		transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
		backdrop-filter: blur(12px);
		-webkit-backdrop-filter: blur(12px);
		border: 1px solid rgba(255, 255, 255, 0.1);
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
		color: white;
		padding: 0;
		margin: 0;
		flex-shrink: 0;
	}

	.holy-card-icon-btn:hover {
		background: rgba(255, 255, 255, 0.2);
		transform: scale(1.1);
		box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
		border-color: rgba(255, 255, 255, 0.2);
	}

	.holy-card-icon-btn:focus {
		outline: 2px solid var(--sl-color-accent);
		outline-offset: 2px;
		background: rgba(255, 255, 255, 0.15);
	}

	.holy-card-icon-btn:active {
		transform: scale(0.95);
	}

	.holy-card-icon-btn svg {
		width: 18px;
		height: 18px;
		color: white;
		fill: none;
		stroke: currentColor;
		stroke-width: 2;
		stroke-linecap: round;
		stroke-linejoin: round;
		filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.3));
	}

	/* Responsive adjustments */
	@media (max-width: 480px) {
		.holy-card-icons {
			top: 8px;
			right: 8px;
			gap: 6px;
		}

		.holy-card-icon-btn {
			width: 32px;
			height: 32px;
		}

		.holy-card-icon-btn svg {
			width: 16px;
			height: 16px;
		}
	}
</style>

<article
	class={`holy-card ${className}`}
	id={uniqueId}
	data-neoglass-panel
	data-background-image={backgroundImage}
	data-link={link}
	role="article"
	aria-labelledby={`${uniqueId}-title`}
	aria-describedby={`${uniqueId}-description`}
>
	<div class="holy-card-glow" data-neoglass-glow aria-hidden="true"></div>
	<div
		class="holy-card-background loading"
		data-bg-src={backgroundImage}
		role="img"
		aria-label={`Background image for ${title}`}
	></div>
	<div class="holy-card-overlay" aria-hidden="true"></div>
	<div class="holy-card-content">
		<h3 class="holy-card-title" id={`${uniqueId}-title`}>{title}</h3>
		<p class="holy-card-description" id={`${uniqueId}-description`}>{description}</p>
		<a
			href={link}
			class="holy-card-button"
			target="_blank"
			rel="noopener noreferrer"
			aria-label={`${buttonName} - Opens in new tab`}
		>
			{buttonName}
		</a>
	</div>

	<!-- Static icons - React will control behavior -->
	{icons && icons.length > 0 && (
		<div class="holy-card-icons">
			{icons.map((iconAction, index) => (
				<button
					class="holy-card-icon-btn"
					data-icon={iconAction.icon}
					data-action={iconAction.action}
					data-card-id={uniqueId}
					aria-label={iconAction.label}
					title={iconAction.tooltip || iconAction.label}
				>
					{iconAction.icon === 'bookmark' && (
						<svg viewBox="0 0 24 24">
							<path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"></path>
						</svg>
					)}
					{iconAction.icon === 'share' && (
						<svg viewBox="0 0 24 24">
							<circle cx="18" cy="5" r="3"></circle>
							<circle cx="6" cy="12" r="3"></circle>
							<circle cx="18" cy="19" r="3"></circle>
							<line x1="8.59" y1="13.51" x2="15.42" y2="17.49"></line>
							<line x1="15.41" y1="6.51" x2="8.59" y2="10.49"></line>
						</svg>
					)}
					{iconAction.icon === 'more' && (
						<svg viewBox="0 0 24 24">
							<circle cx="12" cy="12" r="1"></circle>
							<circle cx="19" cy="12" r="1"></circle>
							<circle cx="5" cy="12" r="1"></circle>
						</svg>
					)}
					{iconAction.icon === 'flag' && (
						<svg viewBox="0 0 24 24">
							<path d="M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"></path>
							<line x1="4" y1="22" x2="4" y2="15"></line>
						</svg>
					)}
					{iconAction.icon === 'download' && (
						<svg viewBox="0 0 24 24">
							<path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
							<polyline points="7,10 12,15 17,10"></polyline>
							<line x1="12" y1="15" x2="12" y2="3"></line>
						</svg>
					)}
					{iconAction.icon === 'star' && (
						<svg viewBox="0 0 24 24">
							<polygon points="12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26"></polygon>
						</svg>
					)}
					{iconAction.icon === 'view' && (
						<svg viewBox="0 0 24 24">
							<path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
							<circle cx="12" cy="12" r="3"></circle>
						</svg>
					)}
					{iconAction.icon === 'heart' && (
						<svg viewBox="0 0 24 24">
							<path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
						</svg>
					)}
				</button>
			))}
		</div>
	)}
</article>

<ReactHolyCard client:only="react" cardId={uniqueId} initialProps={cardProps} />
