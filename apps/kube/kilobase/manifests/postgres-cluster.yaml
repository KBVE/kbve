apiVersion: v1
kind: ConfigMap
metadata:
    name: pgsodium-getkey
    namespace: kilobase
data:
    pgsodium_getkey.sh: |
        #!/bin/bash

        set -euo pipefail

        KEY_FILE=/projected/postgresql-custom/pgsodium_root.key
        if [[ ! -f "${KEY_FILE}" ]]; then
            echo "Key file ${KEY_FILE} does not exist." >&2
            exit 1
        fi
        cat $KEY_FILE
---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
    name: supabase-cluster
    namespace: kilobase
spec:
    instances: 3
    #primaryUpdateStrategy: unsupervised
    imageName: 'kbve/kilobase:17.4'
    imagePullPolicy: Always
    superuserSecret:
        name: supabase-postgres
    #postgresUID: 101
    #postgresGID: 102

    storage:
        size: 20Gi
        storageClass: longhorn

    monitoring:
        enablePodMonitor: true

    projectedVolumeTemplate:
        sources:
            - secret:
                  name: supabase-pgsodium
                  items:
                      # available at /projected/postgresql-custom/pgsodium_root.key
                      - key: pgsodium_root.key
                        path: postgresql-custom/pgsodium_root.key
            - configMap:
                  name: pgsodium-getkey
                  items:
                      # available at /projected/postgresql-custom/pgsodium_getkey.sh
                      - key: pgsodium_getkey.sh
                        path: postgresql-custom/pgsodium_getkey.sh
                        mode: 511
    managed:
        roles:
            - name: supabase_admin
              ensure: present
              comment: 'Supabase Admin'
              login: true
              superuser: true
              passwordSecret:
                  name: supabase-superuser
              inRoles:
                  - createdb
                  - createrole
                  - replication
                  - bypassrls

    enableSuperuserAccess: true

    postgresql:
        parameters:
            cron.database_name: supabase
            pg_net.database_name: supabase
            vault.getkey_script: '/projected/postgresql-custom/pgsodium_getkey.sh'
            pgsodium.getkey_script: '/projected/postgresql-custom/pgsodium_getkey.sh'
            auto_explain.log_min_duration: 10s
            supautils.extensions_parameter_overrides: '{"pg_cron":{"schema":"pg_catalog"}}'
            supautils.policy_grants: '{"postgres":["auth.audit_log_entries","auth.identities","auth.refresh_tokens","auth.sessions","auth.users","realtime.messages","storage.buckets","storage.migrations","storage.objects","storage.s3_multipart_uploads","storage.s3_multipart_uploads_parts"]}'
            supautils.drop_trigger_grants: '{"postgres":["auth.audit_log_entries","auth.identities","auth.refresh_tokens","auth.sessions","auth.users","realtime.messages","storage.buckets","storage.migrations","storage.objects","storage.s3_multipart_uploads","storage.s3_multipart_uploads_parts"]}'
            supautils.privileged_extensions: 'address_standardizer, address_standardizer_data_us, autoinc, bloom, btree_gin, btree_gist, citext, cube, dblink, dict_int, dict_xsyn, earthdistance, fuzzystrmatch, hstore, http, hypopg, index_advisor, insert_username, intarray, isn, ltree, moddatetime, orioledb, pg_buffercache, pg_cron, pg_graphql, pg_hashids, pg_jsonschema, pg_net, pg_prewarm, pg_repack, pg_stat_monitor, pg_stat_statements, pg_tle, pg_trgm, pg_walinspect, pgaudit, pgcrypto, pgjwt, pgroonga, pgroonga_database, pgrouting, pgrowlocks, pgsodium, pgstattuple, pgtap, plcoffee, pljava, plls, plpgsql_check, postgis, postgis_raster, postgis_sfcgal, postgis_tiger_geocoder, postgis_topology, postgres_fdw, refint, rum, seg, sslinfo, supabase_vault, supautils, tablefunc, tcn, tsm_system_rows, tsm_system_time, unaccent, uuid-ossp, vector, wrappers'
            supautils.privileged_extensions_custom_scripts_path: '/etc/postgresql-custom/extension-custom-scripts'
            supautils.privileged_extensions_superuser: 'supabase_admin'
            supautils.privileged_role: 'postgres'
            supautils.privileged_role_allowed_configs: 'auto_explain.*, log_lock_waits, log_min_duration_statement, log_min_messages, log_replication_commands, log_statement, log_temp_files, pg_net.batch_size, pg_net.ttl, pg_stat_statements.*, pgaudit.log, pgaudit.log_catalog, pgaudit.log_client, pgaudit.log_level, pgaudit.log_relation, pgaudit.log_rows, pgaudit.log_statement, pgaudit.log_statement_once, pgaudit.role, pgrst.*, plan_filter.*, safeupdate.enabled, session_replication_role, track_io_timing, wal_compression'
            supautils.reserved_memberships: 'pg_read_server_files, pg_write_server_files, pg_execute_server_program, supabase_admin, supabase_auth_admin, supabase_storage_admin, supabase_read_only_user, supabase_realtime_admin, supabase_replication_admin, dashboard_user, pgbouncer, authenticator'
            supautils.reserved_roles: 'supabase_admin, supabase_auth_admin, supabase_storage_admin, supabase_read_only_user, supabase_realtime_admin, supabase_replication_admin, dashboard_user, pgbouncer, service_role*, authenticator*, authenticated*, anon*'

        pg_hba:
          # ripped from supabase/posgres/ansible/files/postgresql_config/pg_hba.conf
          - local all  supabase_admin       scram-sha-256
          - local all  all                  peer map=supabase_map
          - host  all  all  127.0.0.1/32    trust
          - host  all  all  ::1/128         trust
          - host  all  all  10.0.0.0/8      scram-sha-256
          - host  all  all  172.16.0.0/12   scram-sha-256
          - host  all  all  192.168.0.0/16  scram-sha-256
          - host  all  all  0.0.0.0/0       scram-sha-256
          - host  all  all  ::0/0           scram-sha-256
        
        pg_ident:
          # ripped from supabase/posgres/ansible/files/postgresql_config/pg_ident.conf
          - supabase_map  postgres   postgres
          - supabase_map  gotrue     supabase_auth_admin
          - supabase_map  postgrest  authenticator
          - supabase_map  adminapi   postgres
        # ripped from supabase/posgres/ansible/files/postgresql_config/postgresql.conf
        
        shared_preload_libraries:
          [
            pg_stat_statements,
            pg_stat_monitor,
            pgaudit,
            plpgsql,
            plpgsql_check,
            pg_cron,
            pg_net,
            # orioledb,
            # timescaledb,
            auto_explain,
            pg_tle,
            supautils,
            pgsodium,
            supabase_vault,
            plan_filter,
            # Kilobase
            kilobase,
            pg_failover_slots,
            pgmq
          ]


    env:
        - name: JWT_SECRET
          valueFrom:
              secretKeyRef:
                  name: supabase-jwt
                  key: secret
        - name: JWT_EXP
          value: '3600'

    backup:
        barmanObjectStore:
            destinationPath: s3://kilobase/barman/backup
            serverName: kilobase-postgres-backup
            s3Credentials:
                accessKeyId:
                    name: kilobase-s3-secret
                    key: keyId
                secretAccessKey:
                    name: kilobase-s3-secret
                    key: accessKey
            wal:
                compression: gzip
        retentionPolicy: '30d'

    bootstrap:
      initdb:
        database: supabase
        owner: supabase_admin