---
// Community Stats section with skeleton loader
---

<section class="py-20 relative">
    <!-- Community Stats Skeleton Loader -->
    <div id="community-stats-skeleton-loader" class="transition-opacity duration-500 ease-out">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <!-- Header Skeleton -->
            <div class="text-center mb-16">
                <div class="w-72 h-10 bg-zinc-700/60 rounded animate-pulse mx-auto mb-8"></div>
            </div>
            
            <!-- Stats Grid Skeleton -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
                <div class="p-8 bg-zinc-900/50 border border-zinc-700 rounded-2xl">
                    <div class="w-12 h-12 bg-zinc-700/60 rounded animate-pulse mb-4 mx-auto"></div>
                    <div class="w-32 h-6 bg-zinc-700/60 rounded animate-pulse mb-2 mx-auto"></div>
                    <div class="w-48 h-4 bg-zinc-700/60 rounded animate-pulse mx-auto"></div>
                </div>
                <div class="p-8 bg-zinc-900/50 border border-zinc-700 rounded-2xl">
                    <div class="w-12 h-12 bg-zinc-700/60 rounded animate-pulse mb-4 mx-auto"></div>
                    <div class="w-32 h-6 bg-zinc-700/60 rounded animate-pulse mb-2 mx-auto"></div>
                    <div class="w-48 h-4 bg-zinc-700/60 rounded animate-pulse mx-auto"></div>
                </div>
                <div class="p-8 bg-zinc-900/50 border border-zinc-700 rounded-2xl">
                    <div class="w-12 h-12 bg-zinc-700/60 rounded animate-pulse mb-4 mx-auto"></div>
                    <div class="w-32 h-6 bg-zinc-700/60 rounded animate-pulse mb-2 mx-auto"></div>
                    <div class="w-48 h-4 bg-zinc-700/60 rounded animate-pulse mx-auto"></div>
                </div>
            </div>
            
            <!-- CTA Section Skeleton -->
            <div class="mt-16 text-center">
                <div class="w-64 h-14 bg-zinc-700/60 rounded-xl animate-pulse mx-auto"></div>
            </div>
        </div>
    </div>

    <!-- Actual Community Stats Content -->
    <div id="community-stats-content" class="opacity-0 transition-opacity duration-500 ease-in">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="text-center mb-16">
                <h2 class="text-3xl md:text-4xl font-bold text-white mb-8">
                    Join the Community
                </h2>
            </div>
            
            <!-- Feature Cards -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-8 mb-16">
                <!-- Hot Content Card -->
                <div class="group p-8 bg-zinc-900/50 border border-zinc-700 rounded-2xl hover:border-emerald-500/50 transition-all duration-300 hover:scale-105 hover:shadow-xl hover:shadow-emerald-500/10">
                    <div class="text-6xl mb-6 group-hover:scale-110 transition-transform duration-300">ðŸ”¥</div>
                    <h3 class="text-xl font-semibold text-white mb-4">Hot Content</h3>
                    <p class="text-neutral-400 leading-relaxed">Fresh memes updated every minute from our global community of creators</p>
                    <div class="mt-6 flex items-center space-x-2 text-emerald-400 text-sm">
                        <div class="w-2 h-2 bg-emerald-400 rounded-full animate-pulse"></div>
                        <span>Live updates</span>
                    </div>
                </div>

                <!-- Lightning Fast Card -->
                <div class="group p-8 bg-zinc-900/50 border border-zinc-700 rounded-2xl hover:border-emerald-500/50 transition-all duration-300 hover:scale-105 hover:shadow-xl hover:shadow-emerald-500/10">
                    <div class="text-6xl mb-6 group-hover:scale-110 transition-transform duration-300">âš¡</div>
                    <h3 class="text-xl font-semibold text-white mb-4">Lightning Fast</h3>
                    <p class="text-neutral-400 leading-relaxed">Instant loading and buttery smooth swipes powered by modern web technology</p>
                    <div class="mt-6 flex items-center space-x-2 text-emerald-400 text-sm">
                        <div class="w-2 h-2 bg-emerald-400 rounded-full"></div>
                        <span>&lt; 100ms load time</span>
                    </div>
                </div>

                <!-- Personalized Card -->
                <div class="group p-8 bg-zinc-900/50 border border-zinc-700 rounded-2xl hover:border-emerald-500/50 transition-all duration-300 hover:scale-105 hover:shadow-xl hover:shadow-emerald-500/10">
                    <div class="text-6xl mb-6 group-hover:scale-110 transition-transform duration-300">ðŸŽ¯</div>
                    <h3 class="text-xl font-semibold text-white mb-4">Personalized</h3>
                    <p class="text-neutral-400 leading-relaxed">AI learns what makes you laugh and curates the perfect feed just for you</p>
                    <div class="mt-6 flex items-center space-x-2 text-emerald-400 text-sm">
                        <div class="w-2 h-2 bg-emerald-400 rounded-full"></div>
                        <span>Smart algorithm</span>
                    </div>
                </div>
            </div>

            <!-- Community Statistics -->
            <div class="grid grid-cols-2 md:grid-cols-4 gap-8 mb-16">
                <div class="text-center">
                    <div class="text-3xl md:text-4xl font-bold text-emerald-400 mb-2" data-count="2500000">0</div>
                    <div class="text-neutral-400 text-sm">Total Memes</div>
                </div>
                <div class="text-center">
                    <div class="text-3xl md:text-4xl font-bold text-emerald-400 mb-2" data-count="150000">0</div>
                    <div class="text-neutral-400 text-sm">Active Creators</div>
                </div>
                <div class="text-center">
                    <div class="text-3xl md:text-4xl font-bold text-emerald-400 mb-2" data-count="5000000">0</div>
                    <div class="text-neutral-400 text-sm">Laughs Generated</div>
                </div>
                <div class="text-center">
                    <div class="text-3xl md:text-4xl font-bold text-emerald-400 mb-2" data-count="24">0</div>
                    <div class="text-neutral-400 text-sm">Hours of Fun Daily</div>
                </div>
            </div>

            <!-- Call to Action -->
            <div class="text-center">
                <button class="group px-8 py-4 bg-gradient-to-r from-emerald-500 to-green-500 hover:from-emerald-400 hover:to-green-400 text-white font-semibold rounded-xl transition-all duration-300 hover:scale-105 hover:shadow-lg hover:shadow-emerald-500/25">
                    <span class="flex items-center space-x-2">
                        <span>Start Creating Today</span>
                        <svg class="w-5 h-5 transition-transform duration-300 group-hover:translate-x-1" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                        </svg>
                    </span>
                </button>
                <p class="text-neutral-400 text-sm mt-4">Join 150,000+ creators sharing their humor with the world</p>
            </div>
        </div>
    </div>
</section>

<script>
    // Community Stats fade-in logic with intersection observer
    document.addEventListener('DOMContentLoaded', () => {
        const skeleton = document.getElementById('community-stats-skeleton-loader');
        const content = document.getElementById('community-stats-content');
        
        // Counter animation function
        function animateCounter(element: HTMLElement, target: number, duration = 2000) {
            let start = 0;
            const increment = target / (duration / 16); // 60fps
            
            function updateCounter() {
                start += increment;
                if (start < target) {
                    if (target >= 1000000) {
                        element.textContent = (start / 1000000).toFixed(1) + 'M+';
                    } else if (target >= 1000) {
                        element.textContent = (start / 1000).toFixed(0) + 'K+';
                    } else {
                        element.textContent = Math.floor(start).toString();
                    }
                    requestAnimationFrame(updateCounter);
                } else {
                    if (target >= 1000000) {
                        element.textContent = (target / 1000000).toFixed(1) + 'M+';
                    } else if (target >= 1000) {
                        element.textContent = (target / 1000).toFixed(0) + 'K+';
                    } else {
                        element.textContent = target.toString();
                    }
                }
            }
            
            updateCounter();
        }

        // Use intersection observer for better performance
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    setTimeout(() => {
                        if (skeleton && content) {
                            skeleton.style.opacity = '0';
                            content.style.opacity = '1';
                            
                            // Start counter animations
                            setTimeout(() => {
                                const counters = content.querySelectorAll('[data-count]');
                                counters.forEach(counter => {
                                    const dataCount = counter.getAttribute('data-count');
                                    if (dataCount) {
                                        const target = parseInt(dataCount);
                                        animateCounter(counter as HTMLElement, target);
                                    }
                                });
                            }, 200);
                            
                            setTimeout(() => {
                                skeleton.remove();
                            }, 500);
                        }
                    }, 800);
                    
                    observer.unobserve(entry.target);
                }
            });
        }, { threshold: 0.1 });

        if (skeleton) {
            observer.observe(skeleton);
        }
    });
</script>
