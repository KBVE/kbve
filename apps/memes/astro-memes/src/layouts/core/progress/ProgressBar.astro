---
// Progress Bar component for page loading indication
---

<div id="progress-bar-container" class="fixed top-0 left-0 right-0 z-[60] h-1">
    <div 
        id="progress-bar" 
        class="h-full bg-gradient-to-r from-emerald-400 via-green-400 to-emerald-500 shadow-lg shadow-emerald-500/50 transition-all duration-300 ease-out"
        style="width: 0%; transform-origin: left;"
    ></div>
</div>

<script>
    class ProgressBar {
        private bar: HTMLElement | null;
        private container: HTMLElement | null;
        private progress: number = 0;
        private isVisible: boolean = false;

        constructor() {
            this.bar = document.getElementById('progress-bar');
            this.container = document.getElementById('progress-bar-container');
            this.init();
        }

        private init() {
            // Start progress when page starts loading
            this.start();

            // Update progress based on document ready state
            this.updateProgress();

            // Listen for navigation events (for SPA-like behavior)
            this.setupNavigationListeners();

            // Complete when page is fully loaded
            window.addEventListener('load', () => {
                this.complete();
            });

            // Handle page unload (when navigating away)
            window.addEventListener('beforeunload', () => {
                this.start();
            });
        }

        private start() {
            if (!this.bar || !this.container) return;
            
            this.progress = 0;
            this.isVisible = true;
            this.container.style.opacity = '1';
            this.updateBar();
            
            // Simulate initial loading progress
            this.simulateProgress();
        }

        private simulateProgress() {
            if (!this.isVisible) return;

            // Simulate realistic loading progress
            const increment = Math.random() * 15 + 5; // 5-20% increments
            this.progress = Math.min(this.progress + increment, 85); // Cap at 85% until real completion
            
            this.updateBar();

            if (this.progress < 85) {
                setTimeout(() => this.simulateProgress(), Math.random() * 200 + 100); // 100-300ms intervals
            }
        }

        private updateProgress() {
            if (document.readyState === 'loading') {
                this.setProgress(30);
            } else if (document.readyState === 'interactive') {
                this.setProgress(70);
            } else if (document.readyState === 'complete') {
                this.complete();
            }

            // Listen for readyState changes
            document.addEventListener('readystatechange', () => {
                this.updateProgress();
            });
        }

        private setupNavigationListeners() {
            // Listen for anchor clicks for smoother transitions
            document.addEventListener('click', (e) => {
                const target = e.target as HTMLElement;
                const link = target.closest('a');
                
                if (link && link.href && link.href !== window.location.href) {
                    // Only show progress for same-origin links
                    try {
                        const url = new URL(link.href);
                        if (url.origin === window.location.origin) {
                            this.start();
                        }
                    } catch {
                        // Invalid URL, ignore
                    }
                }
            });

            // Listen for form submissions
            document.addEventListener('submit', () => {
                this.start();
            });
        }

        private setProgress(value: number) {
            this.progress = Math.max(this.progress, value);
            this.updateBar();
        }

        private updateBar() {
            if (!this.bar) return;
            this.bar.style.width = `${this.progress}%`;
        }

        private complete() {
            if (!this.bar || !this.container) return;
            
            this.progress = 100;
            this.updateBar();
            
            // Hide after completion
            setTimeout(() => {
                if (this.container) {
                    this.container.style.opacity = '0';
                    this.isVisible = false;
                    
                    // Reset after fade out
                    setTimeout(() => {
                        this.progress = 0;
                        this.updateBar();
                    }, 300);
                }
            }, 500);
        }

        // Public methods for manual control
        public show() {
            this.start();
        }

        public hide() {
            this.complete();
        }

        public set(value: number) {
            this.setProgress(Math.max(0, Math.min(100, value)));
        }
    }

    // Initialize progress bar
    document.addEventListener('DOMContentLoaded', () => {
        window.progressBar = new ProgressBar();
    });

    // Make it globally accessible
    declare global {
        interface Window {
            progressBar: ProgressBar;
        }
    }
</script>

<style>
    #progress-bar-container {
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
        background: linear-gradient(90deg, 
            rgba(16, 185, 129, 0.1) 0%, 
            rgba(34, 197, 94, 0.1) 50%, 
            rgba(16, 185, 129, 0.1) 100%
        );
    }

    #progress-bar {
        position: relative;
        overflow: hidden;
    }

    #progress-bar::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(90deg, 
            transparent, 
            rgba(255, 255, 255, 0.3), 
            transparent
        );
        transform: translateX(-100%);
        animation: shimmer 2s infinite;
    }

    @keyframes shimmer {
        0% {
            transform: translateX(-100%);
        }
        100% {
            transform: translateX(100%);
        }
    }

    /* Pulsing glow effect */
    #progress-bar {
        animation: glow 2s ease-in-out infinite alternate;
    }

    @keyframes glow {
        from {
            box-shadow: 0 0 5px rgba(16, 185, 129, 0.5);
        }
        to {
            box-shadow: 0 0 20px rgba(16, 185, 129, 0.8), 0 0 30px rgba(34, 197, 94, 0.3);
        }
    }
</style>
