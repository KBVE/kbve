---
/** @jsxImportSource astro */

import { pwaInfo } from 'virtual:pwa-info';

// import Panel from 'src/layout/ui/Panel.astro';
import SveltePanels from './svelte/panel/SveltePanels.astro';
import Header from './Header.astro';

export interface Props {
	title: string;
	description: string;
	image?: string;
	url?: string;
}

const { title, description, image, url } = Astro.props as Props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

import 'src/styles/global.css';
import { ClientRouter } from 'astro:transitions';
---

<!doctype html>
<html lang="en">
	<head>
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="canonical" href={url ?? canonicalURL} />

		<title>{title}</title>

		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={image ?? '/default-image.jpg'} />
		<meta property="og:type" content="website" />
		<meta property="og:url" content={url ?? Astro.url.href} />
		<meta name="generator" content={Astro.generator} />

		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:description" content={description} />
		<meta name="twitter:image" content={image ?? '/default-image.jpg'} />
		<script src="/src/pwa.ts"></script>
		<script src="/src/client/droid.ts"></script>


		<script is:inline>
			document.addEventListener('astro:before-preparation', () => {
				//document.querySelector("#loading").classList.add("show");
			});
			document.addEventListener('astro:after-swap', () => {
				window.kbve?.uiux?.closeAllPanels();
				//document.querySelector("#loading").classList.remove("show");
			});
			// document.addEventListener("DOMContentLoaded", () => {
			// 						window.kbve?.uiux?.closeAllPanels();
			// });
		</script>

		{pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} />}

		<ClientRouter fallback="swap" />
	</head>
	<body
		role="document"
		class="h-full bg-[#28243d] bg-[url('/assets/media/bg/pattern.svg')] text-gray-100 relative perspective-[2000px] perspective-distant">
		<SveltePanels />

		<!-- Glowing Progress Bar -->
		<!-- <div
			x-data="{ show: false, dimmed: false }"
			x-init="
				show = true;
				setTimeout(() => {
					dimmed = true;
					setTimeout(() => show = false, 500);
				}, 100)
			"
			x-show="show"
			:class="dimmed ? 'bg-purple-500/50' : 'bg-purple-500 animate-pulse'"
			id="loading"
			class="fixed top-0 left-0 h-1 w-full z-[99999] transition-all duration-700 ease-in-out opacity-100 flex items-center justify-end pr-2 overflow-visible">
			
		</div> -->

		<Header />
		<div
			id="main-content"
			class="bg-[#28243d] relative z-10 flex flex-col min-h-screen transition-all duration-500 ease-in-out will-change-transform origin-center transform-3d">
			<slot role="main" />
		</div>
		<script is:inline>		
			if (typeof window !== 'undefined') {
				function updateMainPerspective() {
					const mainContent = document.getElementById('main-content');
					if (!mainContent) return;

					const panels = window.kbve?.uiux?.state.get().panelManager ?? {};

					Object.values(panels).some(p => p?.open)
						? mainContent.classList.add('scale-95', 'rotate-x-51', 'rotate-z-43', 'blur-sm')
						: mainContent.classList.remove('scale-95', 'rotate-x-51', 'rotate-z-43', 'blur-sm');
				}

				async function setupPerspectiveWatcher() {
					while (!window.kbve?.uiux?.state)
						await new Promise((r) => setTimeout(r, 50));

					window.kbve.uiux.state.subscribe(updateMainPerspective);
					updateMainPerspective();
				}
		
				setupPerspectiveWatcher();
			}
		</script>
		
		
	</body>
</html>
