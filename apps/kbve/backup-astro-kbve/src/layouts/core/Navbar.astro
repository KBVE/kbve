---
import BrandLogo from 'src/layouts/core/BrandLogo.astro';
import MiniNav from 'src/layouts/components/dashboard/basic/MiniNav';
---

<style>
	.navbar-header {
		transition: top 0.3s ease-in-out;
	}
	
	.navbar-nav {
		transition: all 0.3s ease-in-out;
	}

	/* Dashboard mode adjustments */
	.navbar-header[data-navbar-context="dashboard"] .navbar-nav {
		border-bottom: 1px solid rgb(39 39 42); /* zinc-800 */
	}
</style>

<header
	class="navbar-header sticky inset-x-0 z-50 flex w-full flex-wrap text-sm min-h-11 md:min-h-12 md:flex-nowrap md:justify-start"
	data-navbar-context="default">
	<nav
		class="navbar-nav relative mx-2 w-full rounded-[36px] border border-yellow-100/40 bg-yellow-50/60 px-4 py-2 backdrop-blur-md dark:border-neutral-700/40 dark:bg-neutral-800/40 dark:backdrop-blur-md md:flex md:items-center md:justify-between md:px-6 md:py-2 lg:px-8 xl:mx-auto"
		aria-label="Global">
		<div class="flex items-center">
			<!-- Brand logo -->
			<a
				href="/"
				aria-label="Brand"
				data-astro-prefetch
				class="group relative flex-none rounded-lg outline-none ring-zinc-500 focus-visible:ring dark:ring-zinc-200 dark:focus:outline-none transition duration-300 hover:scale-105 hover:drop-shadow-[0_0_8px_rgba(192,132,252,0.4)]">
				<BrandLogo
					class="h-auto w-24 transition-transform transition duration-500 hover:brightness-125 hover:contrast-125"
				/>
				<span
					class="absolute -top-1 -right-1 h-2 w-2 rounded-full bg-cyan-400 group-hover:animate-ping">
				</span>
			</a>

			<div class="w-px h-10 bg-neutral-300 dark:bg-white/20 mx-4"></div>

			<!-- Dashboard Controls -->
			<div class="flex items-center space-x-2">
				<!-- Universal Menu Button -->
				<button
					id="universal-menu-btn"
					class="p-2 text-zinc-400 hover:text-cyan-400 hover:bg-cyan-50 dark:hover:bg-cyan-900/20 rounded-lg transition-colors duration-200"
					aria-label="Toggle menu"
					onclick="toggleNavbarMenu()">
					<svg
						id="menu-icon"
						class="w-5 h-5 transition-transform duration-200"
						fill="none"
						stroke="currentColor"
						viewBox="0 0 24 24">
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M4 6h16M4 12h16M4 18h16">
						</path>
					</svg>
				</button>
			</div>

			<div class="w-px h-10 bg-neutral-300 dark:bg-white/20 mx-4"></div>

			<!-- Navigation Links -->
			<div class="flex flex-row mx-auto" id="nav-menu">
				<!-- Navigation items can be added here if needed -->
			</div>
		</div>

		<!-- Dashboard User Section -->
		<div class="flex items-center space-x-4 ml-auto">
			<!-- Avatar Skeleton -->
			<div
				class="flex items-center space-x-4"
				data-skeleton="avatar">
				<!-- User Avatar Skeleton -->
				<div
					class="w-8 h-8 bg-zinc-300 dark:bg-zinc-800 rounded-full animate-pulse">
				</div>
				<div class="hidden sm:block">
					<div
						class="h-3 bg-zinc-300 dark:bg-zinc-800 rounded w-20 animate-pulse">
					</div>
					<div
						class="h-2 bg-zinc-300 dark:bg-zinc-800 rounded w-12 mt-1 animate-pulse">
					</div>
				</div>
			</div>
			<!-- MiniNav Component -->
			<MiniNav client:only="react" />
		</div>
	</nav>
</header>

<script is:inline>
// Simple global function for the navbar menu button
function toggleNavbarMenu() {
  console.log('[Navbar] Menu button clicked');
  if (typeof window.toggleSidebar === 'function') {
    window.toggleSidebar();
  } else {
    console.warn('[Navbar] toggleSidebar not available yet');
  }
}

(function() {
  function setupDashboardControls() {
    console.log('[Navbar] Setting up dashboard controls');
    
    // Detect dashboard context and adjust navbar styling
    function adjustNavbarForDashboard() {
      const header = document.querySelector('.navbar-header');
      const nav = document.querySelector('.navbar-nav');
      const isDashboardPage = document.querySelector('[data-grid="home"]') || 
                            document.querySelector('[data-dashboard-header]') ||
                            window.location.pathname.includes('/dashboard') ||
                            window.location.pathname === '/c' ||
                            window.location.pathname === '/settings' ||
                            window.location.pathname === '/support' ||
                            window.location.pathname === '/onboarding' ||
                            window.location.pathname === '/igbc';

      if (header && nav && isDashboardPage) {
        console.log('[Navbar] Dashboard context detected, adjusting navbar');
        // Dashboard mode: flush header
        header.setAttribute('data-navbar-context', 'dashboard');
        header.classList.remove('top-4');
        header.classList.add('top-0');
        
        // Adjust dashboard container padding
        const dashboardContainer = document.querySelector('[data-grid="home"]');
        if (dashboardContainer) {
          dashboardContainer.classList.remove('pt-20');
          dashboardContainer.classList.add('pt-0');
        }
      } else if (header && nav) {
        console.log('[Navbar] Default context, standard navbar');
        // Default mode: floating header
        header.setAttribute('data-navbar-context', 'default');
        header.classList.remove('top-0');
        header.classList.add('top-4');
        
        // Reset dashboard container padding if it exists
        const dashboardContainer = document.querySelector('[data-grid="home"]');
        if (dashboardContainer) {
          dashboardContainer.classList.remove('pt-0');
          dashboardContainer.classList.add('pt-20');
        }
      }
    }

    // Run immediately
    adjustNavbarForDashboard();
    
    // Local menu state management
    const universalMenuBtn = document.getElementById('universal-menu-btn');
    
    console.log('[Navbar] Button found:', !!universalMenuBtn);
    
    // State tracking
    let isMenuOpen = false;

    // Simplified function to check sidebar state
    function checkSidebarState() {
      const sidebar = document.getElementById('sidebar');
      if (sidebar) {
        const transform = window.getComputedStyle(sidebar).transform;
        const wasOpen = isMenuOpen;
        isMenuOpen = transform === 'none' || transform === 'matrix(1, 0, 0, 1, 0, 0)';
        
        // Update button state if it changed
        if (wasOpen !== isMenuOpen) {
          updateButtonState();
        }
      }
    }

    function updateButtonState() {
      const menuIcon = document.getElementById('menu-icon');
      
      if (menuIcon) {
        if (!isMenuOpen) {
          // Menu is closed
          menuIcon.style.transform = 'rotate(0deg)';
          universalMenuBtn.setAttribute('aria-label', 'Open menu');
        } else {
          // Menu is open
          menuIcon.style.transform = 'rotate(180deg)';
          universalMenuBtn.setAttribute('aria-label', 'Close menu');
        }
      }
    }

    // Monitor sidebar state changes (for button icon updates)
    const sidebar = document.getElementById('sidebar');
    if (sidebar) {
      // Watch for transform changes on the sidebar
      const observer = new MutationObserver(checkSidebarState);
      observer.observe(sidebar, {
        attributes: true,
        attributeFilter: ['class', 'style']
      });
      
      // Initial state check
      checkSidebarState();
    }

    // Universal menu button click handler
    if (universalMenuBtn) {
      console.log('[Navbar] Adding click listener to menu button');
      universalMenuBtn.addEventListener('click', function (e) {
        e.preventDefault();
        e.stopPropagation();
        console.log('[Navbar] Universal menu button clicked');
        
        // Use the existing sidebar's toggle function
        if (typeof window.toggleSidebar === 'function') {
          console.log('[Navbar] Using existing toggleSidebar function');
          window.toggleSidebar();
          
          // Update button icon state
          const sidebar = document.getElementById('sidebar');
          if (sidebar) {
            const transform = window.getComputedStyle(sidebar).transform;
            const isOpen = transform === 'none' || transform === 'matrix(1, 0, 0, 1, 0, 0)';
            isMenuOpen = !isOpen; // Inverted because we just toggled
            updateButtonState();
          }
        } else {
          console.warn('[Navbar] toggleSidebar function not available yet, trying fallback');
          // Fallback to direct sidebar manipulation
          const sidebar = document.getElementById('sidebar');
          const overlay = document.getElementById('sidebar-overlay');
          
          if (sidebar && overlay) {
            const transform = window.getComputedStyle(sidebar).transform;
            const isOpen = transform === 'none' || transform === 'matrix(1, 0, 0, 1, 0, 0)';
            
            if (isOpen) {
              // Close sidebar
              sidebar.classList.add('-translate-x-full');
              sidebar.classList.remove('translate-x-0');
              overlay.classList.add('opacity-0', 'pointer-events-none', 'hidden');
              overlay.classList.remove('opacity-100');
              isMenuOpen = false;
            } else {
              // Open sidebar
              sidebar.classList.remove('-translate-x-full');
              sidebar.classList.add('translate-x-0');
              overlay.classList.remove('hidden', 'opacity-0', 'pointer-events-none');
              overlay.classList.add('opacity-100');
              isMenuOpen = true;
            }
            updateButtonState();
          }
        }
      });
    } else {
      console.warn('[Navbar] Universal menu button not found!');
    }

    console.log('[Navbar] Menu controls initialized - using existing sidebar functionality');
  }

  // Initialize on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupDashboardControls);
  } else {
    setupDashboardControls();
  }

  // Also run on Astro page changes
  document.addEventListener('astro:page-load', setupDashboardControls);
})();
</script>
