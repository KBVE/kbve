syntax = "proto3";

package store;

service StoreService {
  // Set a key-value pair in the store
  rpc Set(StoreObj) returns (StoreResponse);

  // Get the value for a given key
  rpc Get(StoreKey) returns (KeyValueResponse);

  // Delete a key from the store
  rpc Delete(StoreKey) returns (StoreResponse);

  // Update an existing key-value pair
  rpc Update(StoreObj) returns (StoreResponse);

  // List all stored keys
  rpc ListKeys(Empty) returns (KeyListResponse);

  // Batch operations
  rpc BatchSet(BatchStoreObj) returns (StoreResponse);
  rpc BatchGet(BatchStoreKey) returns (BatchKeyValueResponse);
  rpc BatchDelete(BatchStoreKey) returns (StoreResponse);

  // Stream all keys (useful for large datasets)
  rpc StreamKeys(Empty) returns (stream StoreKey);
}

// Represents a stored value
message StoreValue {
  string value = 1;
}

// Represents a key for a store operation
message StoreKey {
  string key = 1;
}

// Represents a key-value pair (used for storing data)
message StoreObj {
  string key = 1;
  string value = 2;
  int64 timestamp = 3; // Unix timestamp of last modification
  optional int64 expiry = 4; // TTL in seconds (optional)
}

// Response when fetching a value
message KeyValueResponse {
  string value = 1;
}

// Response for Set/Delete/Update operations
message StoreResponse {
  bool success = 1;
  string message = 2;
}

// Response for listing all keys
message KeyListResponse {
  repeated string keys = 1;
}

// Batch store objects (for batch setting)
message BatchStoreObj {
  repeated StoreObj items = 1;
}

// Batch store keys (for batch getting/deleting)
message BatchStoreKey {
  repeated string keys = 1;
}

// Batch response for getting multiple values
message BatchKeyValueResponse {
  map<string, string> key_values = 1;
}

// Empty message for requests that don't need parameters
message Empty {}
