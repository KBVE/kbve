---
import ReactSidebarNav from './ReactSidebar';
---

<!-- Sidebar Overlay for Mobile -->
<div
	id="sidebar-overlay"
	class="fixed inset-0 bg-black/60 lg:hidden hidden opacity-0 pointer-events-none transition-opacity duration-300 ease-in-out cursor-pointer z-15">
</div>

<aside
	id="sidebar"
	class="absolute lg:static top-0 left-0 h-screen lg:h-auto w-64 bg-zinc-800 lg:bg-transparent border-r border-zinc-700 lg:border-zinc-700 lg:z-auto -translate-x-full lg:translate-x-0 transition-transform duration-300 ease-in-out lg:transition-none shadow-2xl lg:shadow-none flex flex-col z-30 overflow-hidden">
	<!-- Mobile header with close button - ALWAYS visible on mobile, sticky at top -->
	<div
		class="lg:hidden flex items-center justify-between p-4 border-b border-zinc-700 bg-zinc-800 flex-shrink-0">
		<div class="flex items-center space-x-3 group">
			<div
				class="relative w-8 h-8 rounded-lg bg-cyan-400/30 backdrop-blur-md shadow-inner shadow-cyan-500/20 ring-1 ring-cyan-300/30 flex items-center justify-center group-hover:scale-105 transition-transform duration-300">
				<div
					class="absolute -inset-1 rounded-lg bg-cyan-400/20 blur-xl opacity-70 group-hover:opacity-90 transition-opacity">
				</div>
				<svg
					viewBox="0 0 76 76"
					class="w-4 h-4 z-10 text-cyan-200 drop-shadow-[0_0_4px_cyan] group-hover:animate-pulse"
					xmlns="http://www.w3.org/2000/svg"
					xmlns:xlink="http://www.w3.org/1999/xlink"
					version="1.1"
					baseProfile="full"
					enable-background="new 0 0 76.00 76.00"
					xml:space="preserve"
					fill="currentColor">
					<g id="SVGRepo_bgCarrier" stroke-width="0"></g><g
						id="SVGRepo_tracerCarrier"
						stroke-linecap="round"
						stroke-linejoin="round">
					</g><g id="SVGRepo_iconCarrier">
						<path
							fill="#000000"
							fill-opacity="1"
							stroke-linejoin="round"
							d="M 19.3919,37.5442C 19.6211,31.4744 22.697,25.8757 28.3209,22.1759C 28.3375,22.1822 28.4831,22.1291 28.4166,22.255C 27.9707,22.668 19.9618,32.1286 27.3341,39.5966C 27.3341,39.5966 31.2074,43.3197 34.2103,39.7866C 34.2103,39.7866 37.1747,35.9499 34.173,30.134C 34.173,30.134 33.4135,28.2344 30.6765,27.057L 32.8808,24.6247C 32.8808,24.6247 34.7436,25.424 36.1859,27.5916C 36.1859,27.5916 36.2626,25.3093 34.5143,22.8771L 37.9323,19L 41.3153,22.8411C 41.3153,22.8411 39.7596,25.0452 39.645,27.6276C 39.645,27.6276 40.7072,25.8795 42.9887,24.6247L 45.1531,27.057C 45.1531,27.057 43.0717,27.7423 41.6775,30.1087C 40.4786,32.3015 39.5556,36.9906 41.7314,39.867C 41.7314,39.867 44.1662,43.3197 48.45,39.663C 48.45,39.663 56.3257,32.6062 47.6423,22.4039C 47.6423,22.4039 47.168,21.9846 47.7007,22.2127C 51.5385,25.0066 56.1339,28.6918 56.6082,37.8876C 56.4214,49.0393 48.9535,57 38.0487,57C 27.3715,57 19.0713,48.0899 19.3919,37.5442 Z ">
						</path>
					</g>
				</svg>
			</div>
			<span
				class="text-lg font-extrabold tracking-wider bg-gradient-to-r from-cyan-300 via-cyan-400 to-cyan-500 bg-clip-text text-transparent
		  [text-shadow:0_0_3px_rgba(0,255,255,0.7),0_0_10px_rgba(0,255,255,0.4)]
		  group-hover:animate-glow">
				KBVE
			</span>
		</div>
		<!-- Close button for mobile - ALWAYS visible -->
		<button
			id="close-sidebar"
			class="p-2 text-zinc-400 hover:text-white hover:bg-zinc-700 rounded-lg transition-colors duration-200"
			aria-label="Close sidebar">
			<svg
				class="w-5 h-5"
				fill="none"
				stroke="currentColor"
				viewBox="0 0 24 24">
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					d="M6 18L18 6M6 6l12 12">
				</path>
			</svg>
		</button>
	</div>

	<!-- Scrollable content area - takes remaining height, scrollable on mobile -->
	<div
		class="flex-1 min-h-0 overflow-y-auto overscroll-contain lg:overflow-visible lg:overscroll-auto">
		<div class="p-6">
			<!-- Desktop Header - only visible on desktop -->
			<div class="hidden lg:flex items-center justify-between mb-8">
				<div class="flex items-center space-x-4 group">
					<div
						class="relative w-10 h-10 rounded-lg bg-cyan-400/30 backdrop-blur-md shadow-inner shadow-cyan-500/20 ring-1 ring-cyan-300/30 flex items-center justify-center group-hover:scale-105 transition-transform duration-300">
						<div
							class="absolute -inset-1 rounded-lg bg-cyan-400/20 blur-xl opacity-70 group-hover:opacity-90 transition-opacity">
						</div>
						<svg
							viewBox="0 0 76 76"
							class="w-6 h-6 z-10 text-cyan-200 drop-shadow-[0_0_4px_cyan] group-hover:animate-pulse"
							xmlns="http://www.w3.org/2000/svg"
							xmlns:xlink="http://www.w3.org/1999/xlink"
							version="1.1"
							baseProfile="full"
							enable-background="new 0 0 76.00 76.00"
							xml:space="preserve"
							fill="currentColor">
							<g id="SVGRepo_bgCarrier" stroke-width="0"></g><g
								id="SVGRepo_tracerCarrier"
								stroke-linecap="round"
								stroke-linejoin="round">
							</g><g id="SVGRepo_iconCarrier">
								<path
									fill="#000000"
									fill-opacity="1"
									stroke-linejoin="round"
									d="M 19.3919,37.5442C 19.6211,31.4744 22.697,25.8757 28.3209,22.1759C 28.3375,22.1822 28.4831,22.1291 28.4166,22.255C 27.9707,22.668 19.9618,32.1286 27.3341,39.5966C 27.3341,39.5966 31.2074,43.3197 34.2103,39.7866C 34.2103,39.7866 37.1747,35.9499 34.173,30.134C 34.173,30.134 33.4135,28.2344 30.6765,27.057L 32.8808,24.6247C 32.8808,24.6247 34.7436,25.424 36.1859,27.5916C 36.1859,27.5916 36.2626,25.3093 34.5143,22.8771L 37.9323,19L 41.3153,22.8411C 41.3153,22.8411 39.7596,25.0452 39.645,27.6276C 39.645,27.6276 40.7072,25.8795 42.9887,24.6247L 45.1531,27.057C 45.1531,27.057 43.0717,27.7423 41.6775,30.1087C 40.4786,32.3015 39.5556,36.9906 41.7314,39.867C 41.7314,39.867 44.1662,43.3197 48.45,39.663C 48.45,39.663 56.3257,32.6062 47.6423,22.4039C 47.6423,22.4039 47.168,21.9846 47.7007,22.2127C 51.5385,25.0066 56.1339,28.6918 56.6082,37.8876C 56.4214,49.0393 48.9535,57 38.0487,57C 27.3715,57 19.0713,48.0899 19.3919,37.5442 Z ">
								</path>
							</g>
						</svg>
					</div>
					<span
						class="text-xl font-extrabold tracking-wider bg-gradient-to-r from-cyan-300 via-cyan-400 to-cyan-500 bg-clip-text text-transparent
			  [text-shadow:0_0_3px_rgba(0,255,255,0.7),0_0_10px_rgba(0,255,255,0.4)]
			  group-hover:animate-glow">
						KBVE
					</span>
				</div>
			</div>

			<!-- Navigation Menu Container -->
			<div class="relative" id="nav-container">
				<!-- Navigation Skeleton - Higher z-index, dynamically sized -->
				<nav
					class="space-y-2 relative z-20"
					data-skeleton="aside"
					id="nav-skeleton">
					{/* Main navigation items */}
					{
						Array.from({ length: 4 }).map((_, i) => (
							<div class="flex items-center space-x-3 px-3 py-2 rounded-lg h-10">
								<div class="w-5 h-5 bg-zinc-700 rounded animate-pulse" />
								<div class="h-4 bg-zinc-700 rounded w-20 animate-pulse" />
							</div>
						))
					}

					{/* Divider skeleton */}
					<div class="py-2 h-6">
						<div class="h-px bg-zinc-600 animate-pulse"></div>
					</div>

					{
						/* Additional navigation items - flexible count for future expansion */
					}
					{
						Array.from({ length: 6 }).map((_, i) => (
							<div class="flex items-center space-x-3 px-3 py-2 rounded-lg h-10">
								<div class="w-5 h-5 bg-zinc-700 rounded animate-pulse" />
								<div class="h-4 bg-zinc-700 rounded w-24 animate-pulse" />
							</div>
						))
					}
				</nav>

				<!-- Dynamic Navigation - positioned to match skeleton exactly -->
				<div
					class="absolute top-0 left-0 right-0 z-10"
					id="dynamic-nav">
					<ReactSidebarNav client:only="react" />
				</div>
			</div>

			<!-- Legal -->
			<div
				class="mt-6 pt-6 border-t border-zinc-700"
				data-section="aside-legal">
				<div
					class="flex items-center justify-center space-x-2 text-xs text-zinc-500">
					<a
						href="/legal"
						data-astro-prefetch
						class="hover:text-zinc-300 transition-colors duration-200">
						Legal
					</a>
					<span class="text-zinc-600">•</span>
					<a
						href="/legal/tos"
						data-astro-prefetch
						class="hover:text-zinc-300 transition-colors duration-200">
						ToS
					</a>
					<span class="text-zinc-600">•</span>
					<a
						href="/legal/privacy"
						data-astro-prefetch
						class="hover:text-zinc-300 transition-colors duration-200">
						Privacy
					</a>
				</div>
			</div>
			<!-- Quick Stats -->
			<div
				class="mt-6 pt-6 border-t border-zinc-700"
				data-section="aside-quick-stats">
				<h3
					class="text-xs font-medium text-zinc-400 mb-3 uppercase tracking-wider">
					Quick Stats
				</h3>
				<div class="space-y-2">
					<div class="flex items-center justify-between">
						<span class="text-xs text-zinc-300">Active Users</span>
						<span class="text-xs font-medium text-cyan-400">
							1,234
						</span>
					</div>
					<div class="flex items-center justify-between">
						<span class="text-xs text-zinc-300">Revenue</span>
						<span class="text-xs font-medium text-green-400">
							$12.5K
						</span>
					</div>
					<div class="flex items-center justify-between">
						<span class="text-xs text-zinc-300">Projects</span>
						<span class="text-xs font-medium text-blue-400">
							42
						</span>
					</div>
				</div>
				<!-- Custom slot content in Quick Stats area -->
				<div
					class="mt-4 pt-4 border-t border-zinc-600/50"
					id="slot-nav">
					<slot name="aside" />
				</div>
			</div>
		</div>
	</div>
</aside>

<script>
	// Dynamic navigation height adjustment utility
	function adjustNavigationHeight() {
		const skeleton = document.querySelector(
			'[data-skeleton="aside"]'
		) as HTMLElement;
		const dynamicNav = document.getElementById(
			'dynamic-nav'
		) as HTMLElement;

		if (skeleton && dynamicNav) {
			// Use ResizeObserver to watch for changes in skeleton content
			const resizeObserver = new ResizeObserver((entries) => {
				for (const entry of entries) {
					const height = entry.contentRect.height;
					dynamicNav.style.minHeight = `${height}px`;
				}
			});

			resizeObserver.observe(skeleton);

			// Cleanup function for when component unmounts
			return () => resizeObserver.disconnect();
		}
	}

	// Ensure close button and overlay functionality (backup for main script)
	function ensureCloseFunctionality() {
		const closeBtn = document.getElementById('close-sidebar');
		const sidebar = document.getElementById('sidebar');
		const overlay = document.getElementById('sidebar-overlay');

		if (closeBtn && sidebar && overlay) {
			if (
				!closeBtn.dataset.boundByAside &&
				!closeBtn.dataset.boundByMain
			) {
				closeBtn.dataset.boundByAside = 'true';
				closeBtn.addEventListener('click', function (e) {
					e.preventDefault();
					e.stopPropagation();
					closeSidebarInternal();
				});
			}
			if (!overlay.dataset.boundByAside) {
				overlay.dataset.boundByAside = 'true';
				overlay.addEventListener('click', function (e) {
					e.preventDefault();
					e.stopPropagation();
					closeSidebarInternal();
				});
			}
		}
	}

	// Handle mobile sidebar scrolling
	function handleMobileSidebarScrolling() {
		const sidebar = document.getElementById('sidebar');
		if (!sidebar) return;

		// Force proper mobile scrolling setup
		const setupMobileScrolling = () => {
			if (window.innerWidth < 1024) {
				// Mobile/tablet breakpoint
				// Ensure the sidebar itself has proper height and flex behavior
				sidebar.style.height = '100vh';
				sidebar.style.display = 'flex';
				sidebar.style.flexDirection = 'column';

				// Find the scrollable content container
				const scrollContainer = sidebar.querySelector(
					'.flex-1'
				) as HTMLElement;
				if (scrollContainer) {
					// Force scrollable behavior
					scrollContainer.style.overflowY = 'auto';
					scrollContainer.style.minHeight = '0';
					scrollContainer.style.flex = '1';
					// iOS smooth scrolling
					(scrollContainer.style as any).webkitOverflowScrolling =
						'touch';
				}
			} else {
				// Reset for desktop
				sidebar.style.height = '';
				sidebar.style.display = '';
				sidebar.style.flexDirection = '';

				const scrollContainer = sidebar.querySelector(
					'.flex-1'
				) as HTMLElement;
				if (scrollContainer) {
					scrollContainer.style.overflowY = '';
					scrollContainer.style.minHeight = '';
					scrollContainer.style.flex = '';
					(scrollContainer.style as any).webkitOverflowScrolling = '';
				}
			}
		};

		// Watch for sidebar state changes and window resize
		const observer = new MutationObserver(setupMobileScrolling);
		observer.observe(sidebar, {
			attributes: true,
			attributeFilter: ['class'],
		});

		// Listen for window resize
		window.addEventListener('resize', setupMobileScrolling);

		// Initial setup
		setupMobileScrolling();

		return () => {
			observer.disconnect();
			window.removeEventListener('resize', setupMobileScrolling);
		};
	}

	// Initialize navigation height adjustment
	function initializeNavigation() {
		adjustNavigationHeight();
		ensureCloseFunctionality();
		handleMobileSidebarScrolling();
	}

	// Initialize on DOM load
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initializeNavigation);
	} else {
		initializeNavigation();
	}

	// Also run on navigation changes (for SPA-like behavior)
	document.addEventListener('astro:page-load', initializeNavigation);

	// Run after React components hydrate
	document.addEventListener('astro:after-hydration', function () {
		setTimeout(() => {
			ensureCloseFunctionality();
		}, 100);
	});

	// Simple and reliable sidebar toggle
	function toggleSidebar() {
		const sidebar = document.getElementById('sidebar');
		const overlay = document.getElementById('sidebar-overlay');

		if (!sidebar || !overlay) return;

		// Get the computed transform style to check actual position
		const transform = window.getComputedStyle(sidebar).transform;
		const isOpen =
			transform === 'none' || transform === 'matrix(1, 0, 0, 1, 0, 0)';

		console.log('Current transform:', transform, 'Is open:', isOpen);

		if (isOpen) {
			// Close sidebar
			sidebar.classList.add('-translate-x-full');
			sidebar.classList.remove('translate-x-0');
			overlay.classList.add('opacity-0', 'pointer-events-none', 'hidden');
			overlay.classList.remove('opacity-100');
		} else {
			// Open sidebar
			sidebar.classList.remove('-translate-x-full');
			sidebar.classList.add('translate-x-0');
			overlay.classList.remove(
				'hidden',
				'opacity-0',
				'pointer-events-none'
			);
			overlay.classList.add('opacity-100');
		}
	}

	function closeSidebarInternal() {
		const sidebar = document.getElementById('sidebar');
		const overlay = document.getElementById('sidebar-overlay');

		if (!sidebar || !overlay) return;

		sidebar.classList.add('-translate-x-full');
		sidebar.classList.remove('translate-x-0');
		overlay.classList.add('opacity-0', 'pointer-events-none');
		overlay.classList.remove('opacity-100');

		// Re-enable body scroll and restore position
		const scrollY = document.body.dataset.scrollY;
		document.body.style.position = '';
		document.body.style.top = '';
		document.body.style.width = '';
		document.body.style.overflowY = '';

		if (scrollY) {
			window.scrollTo(0, parseInt(scrollY));
			delete document.body.dataset.scrollY;
		}

		setTimeout(() => {
			overlay.classList.add('hidden');
		}, 300);
	}

	// Make toggleSidebar globally available
	(window as any).toggleSidebar = toggleSidebar;
</script>
