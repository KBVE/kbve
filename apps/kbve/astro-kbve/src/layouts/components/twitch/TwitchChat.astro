---
import ReactTwitchChat from './ReactTwitchChat';

interface Props {
  /** Twitch channel name (username) */
  channel: string;

  /** 'dark' | 'light' | 'auto' */
  theme?: 'dark' | 'light' | 'auto';

  /** Height of the chat embed */
  height?: number | string;

  /** Force dark popout mode */
  darkpopout?: boolean;

  /** Additional CSS classes */
  class?: string;

  /** Container styles */
  style?: string;
}

const {
  channel,
  theme = 'auto',
  height = 500,
  darkpopout = true,
  class: className = '',
  style = '',
} = Astro.props;

const heightValue = typeof height === 'number' ? `${height}px` : height;
---

<style>
  @keyframes pulse {
    0%, 100% {
      opacity: 0.4;
    }
    50% {
      opacity: 0.7;
    }
  }

  .chat-skeleton {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  [data-twitch-chat][data-loaded] .chat-skeleton-container {
    display: none;
  }

  [data-twitch-chat] .chat-embed-container {
    opacity: 0;
    transition: opacity 0.5s ease-out;
  }

  [data-twitch-chat][data-loaded] .chat-embed-container {
    opacity: 1;
  }
</style>

<div
  data-twitch-chat
  data-channel={channel}
  data-theme={theme}
  class={`relative ${className}`}
  style={`height: ${heightValue}; ${style}`}
  role="complementary"
  aria-label={`Twitch chat for ${channel}`}
>
  <!-- Loading Skeleton -->
  <div
    class="chat-skeleton-container absolute inset-0 rounded-2xl overflow-hidden bg-zinc-900 ring-1 ring-zinc-800"
    aria-hidden="true"
  >
    <!-- Chat header -->
    <div class="h-12 border-b border-zinc-800 px-3 py-2 bg-zinc-850">
      <div class="w-20 h-6 rounded bg-zinc-700 chat-skeleton"></div>
    </div>

    <!-- Chat messages skeleton -->
    <div class="p-3 space-y-3">
      {[...Array(8)].map((_, i) => (
        <div class="flex gap-2">
          <div class="w-6 h-6 rounded-full bg-zinc-700 chat-skeleton flex-shrink-0"></div>
          <div class="flex-1 space-y-1">
            <div class="w-16 h-3 rounded bg-zinc-700 chat-skeleton"></div>
            <div
              class="h-3 rounded bg-zinc-700 chat-skeleton"
              style={`width: ${60 + (i * 7) % 40}%`}
            ></div>
          </div>
        </div>
      ))}
    </div>

    <!-- Chat input skeleton -->
    <div class="absolute bottom-0 left-0 right-0 p-3 border-t border-zinc-800 bg-zinc-850">
      <div class="h-10 rounded bg-zinc-700 chat-skeleton"></div>
    </div>

    <!-- Loading spinner overlay -->
    <div class="absolute inset-0 flex items-center justify-center bg-zinc-900/50">
      <div class="text-center">
        <div class="w-12 h-12 border-4 border-purple-600/30 border-t-purple-600 rounded-full animate-spin mb-3"></div>
        <p class="text-sm text-zinc-400">Loading chat...</p>
      </div>
    </div>
  </div>

  <!-- React Chat Component -->
  <div class="chat-embed-container h-full w-full">
    <ReactTwitchChat
      client:visible
      channel={channel}
      theme={theme}
      height={height}
      darkpopout={darkpopout}
    />
  </div>
</div>

<script>
  // Handle loaded state
  document.addEventListener('DOMContentLoaded', () => {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'data-loaded') {
          const target = mutation.target as HTMLElement;
          const channel = target.getAttribute('data-channel');

          // Announce to screen readers
          const announcement = document.createElement('div');
          announcement.className = 'sr-only';
          announcement.setAttribute('role', 'status');
          announcement.setAttribute('aria-live', 'polite');
          announcement.textContent = `Twitch chat for ${channel} has loaded`;
          target.appendChild(announcement);
          setTimeout(() => announcement.remove(), 1000);
        }
      });
    });

    // Observe all chat embeds
    document.querySelectorAll('[data-twitch-chat]').forEach((chat) => {
      observer.observe(chat, { attributes: true });
    });
  });

  // Mark as loaded when iframe loads
  window.addEventListener('message', (event) => {
    if (event.origin.includes('twitch.tv')) {
      const chatContainers = document.querySelectorAll('[data-twitch-chat]');
      chatContainers.forEach((container) => {
        container.setAttribute('data-loaded', '');
      });
    }
  });
</script>