---
import ReactTwitchEmbed from './ReactTwitchEmbed';
import type { TwitchTheme, TwitchEmbedType } from './ServiceTwitch';
import { createInlineStyle } from './ServiceTwitch';

interface Props {
  /** Twitch channel name (username) */
  channel: string;

  /** 'stream' | 'chat' | 'both' */
  type?: TwitchEmbedType;

  /** 'dark' | 'light' | 'auto' */
  theme?: TwitchTheme;

  /** Sizing */
  width?: number | string;
  height?: number | string;
  class?: string;

  /** A11y title for the iframe(s) */
  title?: string;

  /** Show control overlay for stream */
  showControls?: boolean;

  /** Autoplay stream on load */
  autoplay?: boolean;

  /** Start muted */
  muted?: boolean;

  /** Use aspect ratio wrapper. Provide tailwind classes e.g. "aspect-video" or "aspect-[16/9]" */
  aspect?: string;
}

const {
  channel,
  type = 'both',
  theme = 'auto',
  width = '100%',
  height = 500,
  class: className = '',
  title = `${channel} Twitch stream`,
  showControls = true,
  autoplay = false,
  muted = true,
  aspect = 'aspect-video',
} = Astro.props;

const inlineStyle = createInlineStyle(width, height, aspect);
---

<style>
  @keyframes pulse {
    0%, 100% {
      opacity: 0.4;
    }
    50% {
      opacity: 0.7;
    }
  }

  [data-twitch-embed] {
    --tw-bg: rgba(24, 24, 27, 0.9);
    --tw-border: rgba(63, 63, 70, 0.6);
    --tw-purple: #9146ff;
    --tw-purple-light: #a970ff;
    --tw-skeleton: rgba(63, 63, 70, 0.5);
  }

  /* Loading skeleton animation */
  .twitch-skeleton {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  /* Hide skeleton when loaded */
  [data-twitch-embed][data-loaded] .twitch-skeleton-container {
    display: none;
  }

  /* Smooth transition for loaded state */
  [data-twitch-embed] .twitch-embed-container {
    opacity: 0;
    transition: opacity 0.5s ease-out;
  }

  [data-twitch-embed][data-loaded] .twitch-embed-container {
    opacity: 1;
  }
</style>

<div
  data-twitch-embed
  data-theme={theme}
  data-type={type}
  class={`group relative isolate ${className}`}
  style={inlineStyle}
  role="region"
  aria-label={`Twitch embed for ${channel}`}
>
  <div
    class={`
      ${aspect ? `relative ${aspect}` : 'relative'}
      rounded-2xl overflow-hidden
      bg-zinc-900
      ring-1 ring-zinc-800
      shadow-2xl
    `}
  >
    <!-- Loading Skeleton -->
    <div
      class="twitch-skeleton-container absolute inset-0 rounded-2xl overflow-hidden"
      aria-hidden="true"
    >
      <!-- Stream skeleton -->
      <div class={`
        ${type === 'both' ? 'absolute inset-0 right-[340px]' : 'absolute inset-0'}
        bg-zinc-900
      `}>
        <!-- Video placeholder -->
        <div class="absolute inset-0 bg-zinc-800 twitch-skeleton"></div>

        <!-- Fake controls bar -->
        <div class="absolute bottom-0 left-0 right-0 h-12 bg-gradient-to-t from-black/60 to-transparent">
          <div class="flex items-center justify-between p-3">
            <div class="flex items-center gap-2">
              <div class="w-8 h-8 rounded bg-zinc-700 twitch-skeleton"></div>
              <div class="w-8 h-8 rounded bg-zinc-700 twitch-skeleton"></div>
            </div>
            <div class="flex items-center gap-2">
              <div class="w-8 h-8 rounded bg-zinc-700 twitch-skeleton"></div>
            </div>
          </div>
        </div>

        <!-- Twitch logo placeholder -->
        <div class="absolute top-4 left-4 flex items-center gap-2">
          <div class="w-8 h-8 rounded bg-purple-600/30 twitch-skeleton"></div>
          <div class="w-24 h-4 rounded bg-zinc-700 twitch-skeleton"></div>
        </div>
      </div>

      <!-- Chat skeleton (if type is 'both') -->
      {type === 'both' && (
        <div class="absolute top-0 right-0 bottom-0 w-[340px] bg-zinc-850 border-l border-zinc-800">
          <!-- Chat header -->
          <div class="h-12 border-b border-zinc-800 px-3 py-2">
            <div class="w-20 h-6 rounded bg-zinc-700 twitch-skeleton"></div>
          </div>

          <div class="p-3 space-y-3">
            {[...Array(6)].map((_, i) => (
              <div class="flex gap-2">
                <div class="w-6 h-6 rounded-full bg-zinc-700 twitch-skeleton"></div>
                <div class="flex-1 space-y-1">
                  <div class="w-16 h-3 rounded bg-zinc-700 twitch-skeleton"></div>
                  <div class={`h-3 rounded bg-zinc-700 twitch-skeleton`}
                    style={`width: ${60 + Math.random() * 40}%`}></div>
                </div>
              </div>
            ))}
          </div>

          <div class="absolute bottom-0 left-0 right-0 p-3 border-t border-zinc-800">
            <div class="h-10 rounded bg-zinc-700 twitch-skeleton"></div>
          </div>
        </div>
      )}

      <!-- Loading spinner overlay -->
      <div class="absolute inset-0 flex items-center justify-center"
        role="status"
        aria-live="polite"
      >
        <div class="text-center">
          <div class="w-12 h-12 border-4 border-purple-600/30 border-t-purple-600 rounded-full animate-spin mb-3"></div>
          <p class="text-sm text-zinc-400">Loading stream...</p>
        </div>
      </div>
    </div>

    <!-- React Component Container -->
    <div class="twitch-embed-container h-full w-full">
      <ReactTwitchEmbed
        client:visible
        channel={channel}
        type={type}
        theme={theme}
        title={title}
        frameClassName={type === 'both' ? '' : 'rounded-2xl'}
        showControls={showControls}
        autoplay={autoplay}
        muted={muted}
      />
    </div>
  </div>
</div>

<script>
  // Handle fullscreen changes
  document.addEventListener('fullscreenchange', () => {
    const embed = document.querySelector('[data-twitch-embed]');
    if (embed) {
      if (document.fullscreenElement) {
        embed.setAttribute('data-fullscreen', '');
      } else {
        embed.removeAttribute('data-fullscreen');
      }
    }
  });

  // Accessibility: Announce stream status changes
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'attributes' && mutation.attributeName === 'data-loaded') {
        const target = mutation.target as HTMLElement;
        const channel = target.getAttribute('data-twitch-embed');
        if (target.hasAttribute('data-loaded')) {
          const announcement = document.createElement('div');
          announcement.className = 'sr-only';
          announcement.setAttribute('role', 'status');
          announcement.setAttribute('aria-live', 'polite');
          announcement.textContent = `Twitch stream for ${channel} has loaded`;
          target.appendChild(announcement);
          setTimeout(() => announcement.remove(), 1000);
        }
      }
    });
  });

  // Observe all Twitch embeds
  document.querySelectorAll('[data-twitch-embed]').forEach((embed) => {
    observer.observe(embed, { attributes: true });
  });
</script>