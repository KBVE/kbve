---
const ellipseCount = 24;
const baseCx = 50;
const baseCy = 3;
const baseRx = 17;
const baseRy = 4;
const rxStep = 2.5;
const ryStep = 0.42;
const cyStep = 4;
const delayStep = 0.2;
---

<div class="pointer-events-none absolute inset-0 z-0 flex items-center justify-center">
  <svg viewBox="-5 -5 110 110" class="w-full h-[350px] opacity-30">
    <defs>
      <linearGradient id="cyapurple" x1="0%" y1="0%" x2="100%" y2="100%">
        <stop offset="0%" stop-color="#06b6d4" /> <!-- cyan-400 -->
        <stop offset="100%" stop-color="#8b5cf6" /> <!-- purple-500 -->
      </linearGradient>
    </defs>

    <g transform="rotate(135 50 50)" stroke="url(#cyapurple)" fill="none" filter="drop-shadow(0 0 1 rgba(255,255,255, 0.7))">
      {
        Array.from({ length: ellipseCount }).map((_, i) => {
          const cy = baseCy + cyStep * i;
          const rx = baseRx + rxStep * i;
          const ry = baseRy + ryStep * i;
          const delay = -(delayStep * i).toFixed(1);

          return (
            <ellipse cx={baseCx} cy={cy} rx={rx} ry={ry}>
              <animate attributeName="stroke-width" values="0.1;1;0.1" dur="5s" begin={`${delay}s`} repeatCount="indefinite" keyTimes="0;0.5;1" keySplines="0.9 0 0.9 0; 0 0.9 0 0.9" calcMode="spline" />
              <animateTransform attributeName="transform" type="translate" values="0 0; 0 -5; 0 0" dur="5s" begin={`${delay}s`} repeatCount="indefinite" keyTimes="0;0.5;1" keySplines="0.9 0 0.9 0; 0 0.9 0 0.9" calcMode="spline" />
            </ellipse>
          )
        })
      }
    </g>
  </svg>
</div>
