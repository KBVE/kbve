---
import BrandLogo from 'src/layouts/core/BrandLogo.astro';
import MiniNav from 'src/layouts/components/dashboard/basic/MiniNav';
---

<style>
	.navbar-header {
		transition: top 0.3s ease-in-out;
	}
	
	.navbar-nav {
		transition: all 0.3s ease-in-out;
	}

	/* Dashboard mode adjustments */
	.navbar-header[data-navbar-context="dashboard"] .navbar-nav {
		border-bottom: 1px solid rgb(39 39 42); /* zinc-800 */
	}
</style>

<header
	class="navbar-header sticky inset-x-0 z-50 flex w-full flex-wrap text-sm min-h-11 md:min-h-12 md:flex-nowrap md:justify-start"
	data-navbar-context="default">
	<nav
		class="navbar-nav relative mx-2 w-full rounded-[36px] border border-yellow-100/40 bg-yellow-50/60 px-4 py-2 backdrop-blur-md dark:border-neutral-700/40 dark:bg-neutral-800/40 dark:backdrop-blur-md md:flex md:items-center md:justify-between md:px-6 md:py-2 lg:px-8 xl:mx-auto"
		aria-label="Global">
		<div class="flex items-center">
			<!-- Brand logo -->
			<a
				href="/"
				aria-label="Brand"
				data-astro-prefetch
				class="group relative flex-none rounded-lg outline-none ring-zinc-500 focus-visible:ring dark:ring-zinc-200 dark:focus:outline-none transition duration-300 hover:scale-105 hover:drop-shadow-[0_0_8px_rgba(192,132,252,0.4)]">
				<BrandLogo
					class="h-auto w-24 transition-transform transition duration-500 hover:brightness-125 hover:contrast-125"
				/>
				<span
					class="absolute -top-1 -right-1 h-2 w-2 rounded-full bg-cyan-400 group-hover:animate-ping">
				</span>
			</a>

			<div class="w-px h-10 bg-neutral-300 dark:bg-white/20 mx-4"></div>

			<!-- Dashboard Controls -->
			<div class="flex items-center space-x-2">
				<!-- Universal Menu Button -->
				<button
					id="universal-menu-btn"
					class="p-2 text-zinc-400 hover:text-cyan-400 hover:bg-cyan-50 dark:hover:bg-cyan-900/20 rounded-lg transition-colors duration-200"
					aria-label="Toggle menu">
					<svg
						id="menu-icon"
						class="w-5 h-5 transition-transform duration-200"
						fill="none"
						stroke="currentColor"
						viewBox="0 0 24 24">
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M4 6h16M4 12h16M4 18h16">
						</path>
					</svg>
				</button>
			</div>

			<div class="w-px h-10 bg-neutral-300 dark:bg-white/20 mx-4"></div>

			<!-- Navigation Links -->
			<div class="flex flex-row mx-auto" id="nav-menu">
				<!-- Navigation items can be added here if needed -->
			</div>
		</div>

		<!-- Dashboard User Section -->
		<div class="flex items-center space-x-4 ml-auto">
			<!-- Avatar Skeleton -->
			<div
				class="flex items-center space-x-4"
				data-skeleton="avatar">
				<!-- User Avatar Skeleton -->
				<div
					class="w-8 h-8 bg-zinc-300 dark:bg-zinc-800 rounded-full animate-pulse">
				</div>
				<div class="hidden sm:block">
					<div
						class="h-3 bg-zinc-300 dark:bg-zinc-800 rounded w-20 animate-pulse">
					</div>
					<div
						class="h-2 bg-zinc-300 dark:bg-zinc-800 rounded w-12 mt-1 animate-pulse">
					</div>
				</div>
			</div>
			<!-- MiniNav Component -->
			<MiniNav client:only="react" />
		</div>
	</nav>
</header>

<script>
(function() {
  function setupDashboardControls() {
    console.log('[Navbar] Setting up dashboard controls');
    
    // Detect dashboard context and adjust navbar styling
    function adjustNavbarForDashboard() {
      const header = document.querySelector('.navbar-header');
      const nav = document.querySelector('.navbar-nav');
      const isDashboardPage = document.querySelector('[data-grid="home"]') || 
                            document.querySelector('[data-dashboard-header]') ||
                            window.location.pathname.includes('/dashboard') ||
                            window.location.pathname === '/c' ||
                            window.location.pathname === '/settings' ||
                            window.location.pathname === '/support' ||
                            window.location.pathname === '/onboarding' ||
                            window.location.pathname === '/igbc';

      if (header && nav && isDashboardPage) {
        console.log('[Navbar] Dashboard context detected, adjusting navbar');
        // Dashboard mode: flush header
        header.setAttribute('data-navbar-context', 'dashboard');
        header.classList.remove('top-4');
        header.classList.add('top-0');
        
        // Adjust dashboard container padding
        const dashboardContainer = document.querySelector('[data-grid="home"]');
        if (dashboardContainer) {
          dashboardContainer.classList.remove('pt-20');
          dashboardContainer.classList.add('pt-0');
        }
      } else if (header && nav) {
        console.log('[Navbar] Default context, standard navbar');
        // Default mode: floating header
        header.setAttribute('data-navbar-context', 'default');
        header.classList.remove('top-0');
        header.classList.add('top-4');
        
        // Reset dashboard container padding if it exists
        const dashboardContainer = document.querySelector('[data-grid="home"]');
        if (dashboardContainer) {
          dashboardContainer.classList.remove('pt-0');
          dashboardContainer.classList.add('pt-20');
        }
      }
    }

    // Run immediately
    adjustNavbarForDashboard();
    
    function waitForKbve(callback: () => void) {
      if ('requestIdleCallback' in window) {
        requestIdleCallback(() => {
          if (window.kbve?.uiux?.openPanel) {
            callback();
          } else {
            setTimeout(() => waitForKbve(callback), 50);
          }
        });
      } else {
        const interval = setInterval(() => {
          if (window.kbve?.uiux?.openPanel) {
            clearInterval(interval);
            callback();
          }
        }, 100);
      }
    }

    waitForKbve(() => {
      const universalMenuBtn = document.getElementById('universal-menu-btn');
      
      // State tracking
      let isCollapsed = false;
      let hoverTimeout: ReturnType<typeof setTimeout> | null = null;

      // Universal menu button - handles both mobile and desktop scenarios
      if (universalMenuBtn) {
        const updateButtonState = (collapsed: boolean, panelOpen: boolean) => {
          const menuIcon = document.getElementById('menu-icon');
          const isDesktop = window.innerWidth >= 1024;
          
          if (menuIcon) {
            if (!panelOpen) {
              // Panel is closed - show menu icon
              menuIcon.style.transform = 'rotate(0deg)';
              universalMenuBtn.setAttribute('aria-label', 'Open menu');
            } else if (isDesktop && collapsed) {
              // Desktop collapsed - show slightly rotated icon
              menuIcon.style.transform = 'rotate(90deg)';
              universalMenuBtn.setAttribute('aria-label', 'Expand menu');
            } else {
              // Panel is open/expanded - show rotated icon
              menuIcon.style.transform = 'rotate(180deg)';
              universalMenuBtn.setAttribute('aria-label', isDesktop ? 'Collapse menu' : 'Close menu');
            }
          }
        };

        universalMenuBtn.addEventListener('click', function (e) {
          e.preventDefault();
          e.stopPropagation();
          console.log('[Navbar] Universal menu button clicked');
          
          const isMobile = window.innerWidth < 1024; // lg breakpoint
          const panelState = window.kbve?.uiux?.state?.get()?.panelManager?.left;
          
          if (isMobile) {
            // Mobile behavior: toggle off-canvas sidebar
            if (panelState?.open) {
              window.kbve?.uiux?.closePanel?.('left');
              updateButtonState(false, false);
            } else {
              window.kbve?.uiux?.openPanel?.('left');
              updateButtonState(false, true);
            }
          } else {
            // Desktop behavior: toggle between expanded and collapsed
            if (panelState?.open) {
              if (isCollapsed) {
                // Currently collapsed, expand it
                isCollapsed = false;
                window.kbve?.uiux?.updatePanel?.('left', { 
                  width: '320px',
                  collapsed: false 
                });
                
                const leftPanel = document.querySelector('[data-panels="left"]');
                if (leftPanel) {
                  leftPanel.setAttribute('data-collapsed', 'false');
                  // Remove hover listeners when expanded
                  leftPanel.removeEventListener('mouseenter', handleMouseEnter);
                  leftPanel.removeEventListener('mouseleave', handleMouseLeave);
                }
                updateButtonState(false, true);
              } else {
                // Currently expanded, collapse it
                isCollapsed = true;
                window.kbve?.uiux?.updatePanel?.('left', { 
                  width: '60px',
                  collapsed: true 
                });
                
                const leftPanel = document.querySelector('[data-panels="left"]');
                if (leftPanel) {
                  leftPanel.setAttribute('data-collapsed', 'true');
                  // Add hover listeners when collapsed
                  leftPanel.addEventListener('mouseenter', handleMouseEnter);
                  leftPanel.addEventListener('mouseleave', handleMouseLeave);
                }
                updateButtonState(true, true);
              }
            } else {
              // Panel is closed, open it in expanded state
              isCollapsed = false;
              window.kbve?.uiux?.openPanel?.('left');
              
              const leftPanel = document.querySelector('[data-panels="left"]');
              if (leftPanel) {
                leftPanel.setAttribute('data-collapsed', 'false');
              }
              updateButtonState(false, true);
            }
          }
        });
      }

      // Hover behavior functions for collapsed desktop mode
      const handleMouseEnter = () => {
        if (isCollapsed && window.innerWidth >= 1024) {
          if (hoverTimeout) clearTimeout(hoverTimeout);
          window.kbve?.uiux?.updatePanel?.('left', { 
            width: '320px',
            collapsed: false 
          });
          const leftPanel = document.querySelector('[data-panels="left"]');
          if (leftPanel) {
            leftPanel.setAttribute('data-collapsed', 'false');
          }
        }
      };
      
      const handleMouseLeave = () => {
        if (isCollapsed && window.innerWidth >= 1024) {
          hoverTimeout = setTimeout(() => {
            window.kbve?.uiux?.updatePanel?.('left', { 
              width: '60px',
              collapsed: true 
            });
            const leftPanel = document.querySelector('[data-panels="left"]');
            if (leftPanel) {
              leftPanel.setAttribute('data-collapsed', 'true');
            }
          }, 300); // 300ms delay before collapsing
        }
      };

      // Handle window resize to adjust behavior
      window.addEventListener('resize', function() {
        const isMobile = window.innerWidth < 1024;
        const leftPanel = document.querySelector('[data-panels="left"]');
        
        if (isMobile && leftPanel) {
          // Reset to mobile behavior
          leftPanel.setAttribute('data-collapsed', 'false');
          leftPanel.removeEventListener('mouseenter', handleMouseEnter);
          leftPanel.removeEventListener('mouseleave', handleMouseLeave);
          isCollapsed = false;
        }
      });

      console.log('[Navbar] Universal menu controls initialized');
    });
  }

  // Initialize on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupDashboardControls);
  } else {
    setupDashboardControls();
  }

  // Also run on Astro page changes
  document.addEventListener('astro:page-load', setupDashboardControls);
})();
</script>
