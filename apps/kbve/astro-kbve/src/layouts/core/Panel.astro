---
import StaticLeft from "./panels/StaticLeft.astro"
import StaticTop from "./panels/StaticTop.astro"
import StaticRight from "./panels/StaticRight.astro"
import StaticBottom from "./panels/StaticBottom.astro"
---

<div id="panels-root" class="fixed inset-0 top-16 pointer-events-none z-40" style="visibility: hidden;" data-panels>
	<div
		data-panels="top"
		id="panel-top"
		class="panel absolute inset-x-0 top-0 h-64 translate-y-[-100%]">
        <StaticTop />
	</div>
	<div
		data-panels="right"
		id="panel-right"
		class="panel absolute inset-y-0 right-0 w-64 translate-x-[100%]">
        <StaticRight />
	</div>
	<div
		data-panels="bottom"
		id="panel-bottom"
		class="panel absolute inset-x-0 bottom-0 h-96 translate-y-[100%]">
        <StaticBottom />
	</div>
	<div
		data-panels="left"
		id="panel-left"
		class="panel absolute inset-y-0 left-0 w-screen md:w-96 translate-x-[-100%] lg:static lg:translate-x-0 lg:w-80"
		data-dockable="true">
		<StaticLeft>
			<slot name="aside" />
		</StaticLeft>
	</div>
</div>

<script is:inline>
	function setupPanels() {
		document.querySelector('[data-panels]')?.style.setProperty('visibility', 'visible');

		const sides = ['top', 'right', 'bottom', 'left'];
		const panels = Object.fromEntries(
			sides.map((side) => [side, document.getElementById(`panel-${side}`)])
		);

	    const transitionClasses = Object.freeze([
            'transition-transform',
            'duration-300',
            'ease-in-out',
            'pointer-events-auto',
            'bg-white/90',
            'dark:bg-neutral-900/90',
            'backdrop-blur-md',
            'shadow-lg',
            'z-50',
            'overflow-auto',
            'border',
            'border-white/10',
        ]);

        const transformMap = Object.freeze({
            left: Object.freeze(['translate-x-[-100%]', 'translate-x-0']),
            right: Object.freeze(['translate-x-[100%]', 'translate-x-0']),
            top: Object.freeze(['translate-y-[-100%]', 'translate-y-0']),
            bottom: Object.freeze(['translate-y-[100%]', 'translate-y-0']),
        });

		// Desktop docking state for left panel
		let leftPanelDocked = false;

		function getTransformClass(side, hide) {
            return transformMap[side][hide ? 0 : 1];
        }

		function updatePanels(state) {
			for (const side of sides) {
				const panelState = state.panelManager?.[side];
				const panel = panels[side];
				if (!panel || !panelState) continue;

                if (!panel.hasAttribute('data-panel-initialized')) {
                    panel.classList.add('panel', 'absolute', ...transitionClasses);
                    panel.setAttribute('data-panel-initialized', 'true');
                }

				// Handle docking for left panel on desktop
				if (side === 'left' && panel.hasAttribute('data-dockable')) {
					const isDesktop = window.innerWidth >= 1024;
					
					if (isDesktop && panelState.open && !leftPanelDocked) {
						// Dock the panel
						panel.classList.remove('fixed', 'translate-x-[-100%]', 'translate-x-0');
						panel.classList.add('static', 'transform-none');
						leftPanelDocked = true;
						
						// Add margin to main content
						adjustMainContentMargin(true);
					} else if (isDesktop && !panelState.open && leftPanelDocked) {
						// Undock the panel
						panel.classList.remove('static', 'transform-none');
						panel.classList.add('fixed', 'translate-x-[-100%]');
						leftPanelDocked = false;
						
						// Remove margin from main content
						adjustMainContentMargin(false);
					} else if (!isDesktop) {
						// Mobile behavior - always use fixed positioning
						panel.classList.remove('static', 'transform-none');
						panel.classList.add('fixed');
						panel.classList.add(getTransformClass(side, !panelState.open));
						if (leftPanelDocked) {
							leftPanelDocked = false;
							adjustMainContentMargin(false);
						}
					}
				} else {
					// Standard panel behavior for other sides
					if (side === 'left') panel.classList.add('inset-y-0', 'left-0', 'w-screen', 'md:w-96');
					if (side === 'right') panel.classList.add('inset-y-0', 'right-0', 'w-screen', 'md:w-96');
					if (side === 'top') panel.classList.add('inset-x-0', 'top-0', 'h-64');
					if (side === 'bottom') panel.classList.add('inset-x-0', 'bottom-0', 'h-64');

					panel.classList.remove(
						'translate-x-[-100%]', 'translate-x-[100%]', 'translate-x-0',
						'translate-y-[-100%]', 'translate-y-[100%]', 'translate-y-0'
					);
					panel.classList.add(getTransformClass(side, !panelState.open));
				}

				let content = panel.querySelector('.panel-content');
				if (!content) {
					content = document.createElement('div');
					content.className = 'panel-content p-4 text-neutral-800 dark:text-neutral-200';
					const staticBlock = panel.querySelector('.panel-static');
					if (staticBlock?.nextSibling) {
						staticBlock.parentNode.insertBefore(content, staticBlock.nextSibling);
					} else {
						panel.appendChild(content);
					}
				}

				const incomingHtml = panelState.payload?.rawHtml ?? '';
				const currentHtml = content.getAttribute('data-html') ?? '';
				if (incomingHtml !== currentHtml) {
					content.innerHTML = incomingHtml;
					content.setAttribute('data-html', incomingHtml);
				}

				if (!panel.hasAttribute('data-header-initialized')) {
					const header = document.createElement('div');
					header.className = 'panel-header flex justify-between items-center p-4 border-b border-white/10 font-bold text-neutral-700 dark:text-white';
					header.innerHTML = `
						<span class="uppercase text-sm tracking-wide">${side} Panel</span>
						<button onclick="window.kbve?.uiux?.closePanel?.('${side}')" class="text-red-500 hover:text-red-400 text-lg">&times;</button>
					`;
					panel.insertBefore(header, content);
					panel.setAttribute('data-header-initialized', 'true');
				}
			}
		}

		function adjustMainContentMargin(docked) {
			const dashboardContainer = document.querySelector('[data-grid="home"]');
			if (dashboardContainer) {
				if (docked) {
					dashboardContainer.style.marginLeft = '20rem'; // w-80 = 20rem
				} else {
					dashboardContainer.style.marginLeft = '';
				}
			}
		}

		// Handle window resize to undock on mobile
		function handleResize() {
			const isDesktop = window.innerWidth >= 1024;
			if (!isDesktop && leftPanelDocked) {
				// Force close and undock on mobile
				window.kbve?.uiux?.closePanel?.('left');
			}
		}

		function waitForKbve(callback) {
			if ('requestIdleCallback' in window) {
				requestIdleCallback(() => {
					if (window.kbve?.uiux?.state?.subscribe) {
						callback(window.kbve.uiux.state);
					} else {
						setTimeout(() => waitForKbve(callback), 50);
					}
				});
			} else {
				const interval = setInterval(() => {
					if (window.kbve?.uiux?.state?.subscribe) {
						clearInterval(interval);
						callback(window.kbve.uiux.state);
					}
				}, 100);
			}
		}

		waitForKbve((state) => {
			updatePanels(state.get());
			state.subscribe(updatePanels);
			window.addEventListener('resize', handleResize);
			console.log('[Panels] Reactive binding initialized');

			document.addEventListener('keydown', (e) => {
				if (e.key === 'Escape') {
					const panels = window.kbve?.uiux?.state?.get()?.panelManager ?? {};
					const openSide = Object.entries(panels).find(([_, val]) => val.open);
					if (openSide) window.kbve?.uiux?.closePanel?.(openSide[0]);
				}
			});
		});
	}

	document.addEventListener('DOMContentLoaded', setupPanels);
	document.addEventListener('astro:page-load', setupPanels);
</script>
