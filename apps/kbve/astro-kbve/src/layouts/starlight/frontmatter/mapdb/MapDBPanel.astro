---
import { IMapObjectSchema } from 'src/data/schema';
import { z } from 'zod';
import ReactMapDBPanel from './ReactMapDBPanel';

const { data } = Astro.props;
const mapObject = IMapObjectSchema.parse(data);

function formatKey(key: string): string {
	return key
		.replace(/_/g, ' ')
		.replace(/([a-z])([A-Z])/g, '$1 $2')
		.replace(/\b\w/g, (char) => char.toUpperCase());
}

// Type-specific icons
const typeIcons = {
	resource: 'üå≤',
	structure: 'üèõÔ∏è',
};

const resourceTypeIcons = {
	wood: 'ü™µ',
	stone: 'ü™®',
	metal: '‚öôÔ∏è',
	food: 'üåæ',
	none: '‚ùì',
};

const structureTypeIcons = {
	building: 'üè†',
	wall: 'üß±',
	tower: 'üóº',
	decoration: '‚ú®',
};
---

<section class="px-6 py-6 sm:px-8 lg:px-12">
	<div class="max-w-3xl mx-auto">
		<div
			class="relative rounded-2xl p-6 border transition duration-300 space-y-3
			backdrop-blur-md bg-white/5 dark:bg-white/10
			border-white/10 dark:border-white/10
			shadow-[inset_0_0_0.5px_rgba(255,255,255,0.1)]
			hover:shadow-cyan-400/30 dark:hover:shadow-cyan-300/30">
			
			<!-- Header with Image and Name -->
			<div class="flex items-center gap-3">
				{
					mapObject.imagePath && (
						<img
							src={mapObject.imagePath}
							alt={mapObject.name}
							class="w-16 h-16 rounded-lg object-contain bg-black/20 p-1"
							data-tooltip="image"
						/>
					)
				}
				<div>
					<div class="flex items-center gap-2" data-tooltip="name">
						<span class="text-2xl">{typeIcons[mapObject.type]}</span>
						<h3 class="text-lg font-semibold">{mapObject.name}</h3>
					</div>
					{
						mapObject.description && (
							<p class="text-sm text-zinc-400 mt-1">{mapObject.description}</p>
						)
					}
				</div>
			</div>

			<!-- Common Properties -->
			<ul class="text-sm text-zinc-400 space-y-1.5">
				<li class="flex items-center gap-2" data-tooltip="type">
					<strong>Type:</strong>
					<span class="capitalize">{mapObject.type}</span>
				</li>
			</ul>

			<!-- Resource-Specific Stats -->
			{
				mapObject.type === 'resource' && (
					<>
						<hr class="my-4 border-white/10" />
						<div class="text-sm space-y-2">
							<div class="flex items-center gap-2 text-base font-medium text-cyan-400">
								<span>{resourceTypeIcons[mapObject.resourceType]}</span>
								<span>Resource Stats</span>
							</div>
							<ul class="text-zinc-300 space-y-1.5 ml-6">
								<li data-tooltip="resourceType">
									<strong>Resource Type:</strong>{' '}
									<span class="capitalize text-cyan-300">{mapObject.resourceType}</span>
								</li>
								<li data-tooltip="amount">
									<strong>Amount:</strong>{' '}
									<span class="text-green-400">{mapObject.amount} / {mapObject.maxAmount}</span>
								</li>
								<li data-tooltip="harvestYield">
									<strong>Harvest Yield:</strong>{' '}
									<span class="text-yellow-400">{mapObject.harvestYield}</span> per action
								</li>
								<li data-tooltip="harvestTime">
									<strong>Harvest Time:</strong>{' '}
									<span class="text-orange-400">{mapObject.harvestTime}s</span>
								</li>
								<li data-tooltip="harvestable">
									<strong>Harvestable:</strong>{' '}
									<span class={mapObject.isHarvestable ? 'text-green-400' : 'text-red-400'}>
										{mapObject.isHarvestable ? '‚úì Yes' : '‚úó No'}
									</span>
								</li>
								{mapObject.spawnWeight !== undefined && (
									<li data-tooltip="spawnWeight">
										<strong>Spawn Weight:</strong>{' '}
										<span class="text-blue-400">{(mapObject.spawnWeight * 100).toFixed(0)}%</span>
									</li>
								)}
								{mapObject.spawnCount !== undefined && (
									<li data-tooltip="spawnCount">
										<strong>Spawn Count:</strong>{' '}
										<span class="text-purple-400">{mapObject.spawnCount}</span> per map
									</li>
								)}
							</ul>
						</div>
					</>
				)
			}

			<!-- Structure-Specific Stats -->
			{
				mapObject.type === 'structure' && (
					<>
						<hr class="my-4 border-white/10" />
						<div class="text-sm space-y-2">
							<div class="flex items-center gap-2 text-base font-medium text-cyan-400">
								<span>{structureTypeIcons[mapObject.structureType]}</span>
								<span>Structure Stats</span>
							</div>
							<ul class="text-zinc-300 space-y-1.5 ml-6">
								<li data-tooltip="structureType">
									<strong>Structure Type:</strong>{' '}
									<span class="capitalize text-cyan-300">{mapObject.structureType}</span>
								</li>
								<li data-tooltip="footprint">
									<strong>Footprint:</strong>{' '}
									<span class="text-blue-400">
										{mapObject.footprintWidth} √ó {mapObject.footprintHeight}
									</span>
								</li>
								<li data-tooltip="health">
									<strong>Max Health:</strong>{' '}
									<span class="text-red-400">{mapObject.maxHealth} HP</span>
								</li>
								<li data-tooltip="constructionTime">
									<strong>Construction Time:</strong>{' '}
									<span class="text-orange-400">{mapObject.constructionTime}s</span>
								</li>
								<li data-tooltip="walkable">
									<strong>Walkable:</strong>{' '}
									<span class={mapObject.isWalkable ? 'text-green-400' : 'text-red-400'}>
										{mapObject.isWalkable ? '‚úì Yes' : '‚úó No'}
									</span>
								</li>
								<li data-tooltip="placement">
									<strong>Blocks Placement:</strong>{' '}
									<span class={mapObject.blocksPlacement ? 'text-red-400' : 'text-green-400'}>
										{mapObject.blocksPlacement ? '‚úì Yes' : '‚úó No'}
									</span>
								</li>
							</ul>

							{mapObject.buildCosts && mapObject.buildCosts.length > 0 && (
								<>
									<div class="mt-3 pt-3 border-t border-white/10">
										<strong class="text-yellow-400">Build Costs:</strong>
										<ul class="list-disc list-inside ml-3 mt-1 space-y-1">
											{mapObject.buildCosts.map((cost) => (
												<li>
													<span class="capitalize">{cost.resourceType}:</span>{' '}
													<span class="text-yellow-300">{cost.amount}</span>
												</li>
											))}
										</ul>
									</div>
								</>
							)}
						</div>
					</>
				)
			}

			<!-- Animation Info (if present) -->
			{
				mapObject.animation?.hasAnimation && (
					<>
						<hr class="my-4 border-white/10" />
						<div class="text-sm space-y-2">
							<div class="flex items-center gap-2 text-base font-medium text-purple-400">
								<span>üé¨</span>
								<span>Animation</span>
							</div>
							<ul class="text-zinc-300 space-y-1.5 ml-6">
								<li>
									<strong>Animated:</strong>{' '}
									<span class="text-green-400">‚úì Yes</span>
								</li>
								{mapObject.animation.defaultClip && (
									<li>
										<strong>Default Clip:</strong>{' '}
										<span class="text-cyan-300">{mapObject.animation.defaultClip}</span>
									</li>
								)}
								{mapObject.animation.clips && mapObject.animation.clips.length > 0 && (
									<li>
										<strong>Animation Clips:</strong>{' '}
										<span class="text-purple-300">
											{mapObject.animation.clips.map((clip) => clip.id).join(', ')}
										</span>
									</li>
								)}
							</ul>
						</div>
					</>
				)
			}

			<!-- Technical Details -->
			<hr class="my-4 border-white/10" />
			<div class="text-xs text-zinc-500 space-y-1" data-tooltip="technical">
				<div><strong>ID:</strong> <code class="text-zinc-400">{mapObject.id}</code></div>
				<div><strong>GUID:</strong> <code class="text-zinc-400">{mapObject.guid}</code></div>
				<div>
					<strong>Rendering:</strong> Layer: {mapObject.sortingLayer}, PPU: {mapObject.pixelsPerUnit}
				</div>
			</div>
			<!-- React overlay for interactive tooltips -->
			<ReactMapDBPanel data={mapObject} client:only="react" />
		</div>
	</div>
</section>