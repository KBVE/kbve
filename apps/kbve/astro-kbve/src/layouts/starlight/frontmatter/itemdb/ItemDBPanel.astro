---
import { IObjectSchema } from 'src/content/config';
import { z } from 'zod';

const { data } = Astro.props;

const item = IObjectSchema.parse(data);

function formatKey(key: string): string {
	return key
		.replace(/_/g, ' ')
		.replace(/([a-z])([A-Z])/g, '$1 $2')
		.replace(/\b\w/g, (char) => char.toUpperCase());
}
---

<section class="px-6 py-6 sm:px-8 lg:px-12">
	<div class="max-w-3xl mx-auto">
		<div
			class="rounded-2xl p-6 border transition duration-300 space-y-3
			backdrop-blur-md bg-white/5 dark:bg-white/10
			border-white/10 dark:border-white/10
			shadow-[inset_0_0_0.5px_rgba(255,255,255,0.1)]
			hover:shadow-cyan-400/30 dark:hover:shadow-cyan-300/30">
			<div class="flex items-center gap-3">
				{
					item.img && (
						<img
							src={item.img}
							alt={item.name}
							class="w-12 h-12 rounded-lg object-contain"
						/>
					)
				}
				<h3 class="text-lg font-semibold">{item.name}</h3>
			</div>

			<p class="text-sm text-zinc-300">{item.description}</p>

			<ul class="text-sm text-zinc-400 space-y-1">
				<li>
					<strong>Type:</strong>
					<span class="capitalize">{item.type}</span>
				</li>
				{
					item.category && (
						<li>
							<strong>Category:</strong> {item.category}
						</li>
					)
				}
				{
					item.effects && (
						<li>
							<strong>Effects:</strong> {item.effects}
						</li>
					)
				}
				{
					item.cooldown && (
						<li>
							<strong>Cooldown:</strong> {item.cooldown} seconds.
						</li>
					)
				}
				{
					item.rarity && (
						<li>
							<strong>Rarity:</strong> {item.rarity}
						</li>
					)
				}
				{
					item.weight !== undefined && (
						<li>
							<strong>Weight:</strong> {item.weight}
						</li>
					)
				}
				{
					item.stackable !== undefined && (
						<li>
							<strong>Stackable:</strong>{' '}
							{item.stackable ? 'Yes' : 'No'}
						</li>
					)
				}
			</ul>

			{
				item.bonuses && (
					<>
						<hr class="my-4 border-white/10" />
						<div class="text-sm text-cyan-300 mt-3">
							<strong>Bonuses:</strong>
							<ul class="list-disc list-inside ml-3">
								{Object.entries(item.bonuses).map(
									([key, value]) => (
										<li>
											<strong>{formatKey(key)}</strong>:{' '}
											{value}
										</li>
									)
								)}
							</ul>
						</div>
					</>
				)
			}

{
	item.price !== undefined && (
		<div class="mt-6 pt-4 border-t border-white/10">
			<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 text-white">
				<div class="flex items-center gap-2 text-base font-medium">
					<span class="text-cyan-400">💰</span>
					<span class="text-cyan-600 dark:text-cyan-400">Price:</span>
					<span class="text-cyan-600 dark:text-cyan-200 font-semibold">
						{item.price}{' '}
						<span class="text-xs text-zinc-400">$KHash</span>
					</span>
				</div>

				<div class="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-3 text-sm">
					{item.steamMarketUrl ? (
						<a
							href={item.steamMarketUrl}
							target="_blank"
							rel="noopener noreferrer"
							class="inline-flex items-center gap-1 px-3 py-1.5 rounded-lg font-medium bg-cyan-500/10 text-cyan-300 hover:bg-cyan-500/20 transition"
						>
							🛒 Steam Market
						</a>
					) : (
						<span class="text-zinc-500 italic">Not on Steam Market</span>
					)}

					{item.exchangeUrl ? (
						<a
							href={item.exchangeUrl}
							target="_blank"
							rel="noopener noreferrer"
							class="inline-flex items-center gap-1 px-3 py-1.5 rounded-lg font-medium bg-green-500/10 text-green-300 hover:bg-green-500/20 transition"
						>
							🔁 Buy on Exchange
						</a>
					) : (
						<span class="text-zinc-500 light:text-zinc-700 italic">Not on Exchange</span>
					)}
				</div>
			</div>
		</div>
	)
}


		</div>
	</div>
</section>
